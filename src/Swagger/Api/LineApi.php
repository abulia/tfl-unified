<?php
/**
 * LineApi
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Api;

use \Abulia\TflUnified\Swagger\ApiClient;
use \Abulia\TflUnified\Swagger\ApiException;
use \Abulia\TflUnified\Swagger\Configuration;
use \Abulia\TflUnified\Swagger\ObjectSerializer;

/**
 * LineApi Class Doc Comment
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LineApi
{
    /**
     * API Client
     *
     * @var \Abulia\TflUnified\Swagger\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Abulia\TflUnified\Swagger\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Abulia\TflUnified\Swagger\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient $apiClient set the API client
     *
     * @return LineApi
     */
    public function setApiClient(\Abulia\TflUnified\Swagger\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation lineArrivals
     *
     * Get the list of arrival predictions for given line ids based at the given stop
     *
     * @param string $stop_point_id Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Prediction[]
     */
    public function lineArrivals($stop_point_id, $ids)
    {
        list($response) = $this->lineArrivalsWithHttpInfo($stop_point_id, $ids);
        return $response;
    }

    /**
     * Operation lineArrivalsWithHttpInfo
     *
     * Get the list of arrival predictions for given line ids based at the given stop
     *
     * @param string $stop_point_id Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Prediction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineArrivalsWithHttpInfo($stop_point_id, $ids)
    {
        // verify the required parameter 'stop_point_id' is set
        if ($stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stop_point_id when calling lineArrivals');
        }
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineArrivals');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}/Arrivals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($stop_point_id !== null) {
            $queryParams['stopPointId'] = $this->apiClient->getSerializer()->toQueryValue($stop_point_id);
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Prediction[]',
                '/Line/{ids}/Arrivals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Prediction[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Prediction[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineArrivalsByStopPoint
     *
     * Get the list of arrival predictions for given line ids based at the given stop going in the procided direction
     *
     * @param string $stop_point_id Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param string $direction The direction of travel. Can be inbound or outbound (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Prediction[]
     */
    public function lineArrivalsByStopPoint($stop_point_id, $ids, $direction)
    {
        list($response) = $this->lineArrivalsByStopPointWithHttpInfo($stop_point_id, $ids, $direction);
        return $response;
    }

    /**
     * Operation lineArrivalsByStopPointWithHttpInfo
     *
     * Get the list of arrival predictions for given line ids based at the given stop going in the procided direction
     *
     * @param string $stop_point_id Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param string $direction The direction of travel. Can be inbound or outbound (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Prediction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineArrivalsByStopPointWithHttpInfo($stop_point_id, $ids, $direction)
    {
        // verify the required parameter 'stop_point_id' is set
        if ($stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stop_point_id when calling lineArrivalsByStopPoint');
        }
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineArrivalsByStopPoint');
        }
        // verify the required parameter 'direction' is set
        if ($direction === null) {
            throw new \InvalidArgumentException('Missing the required parameter $direction when calling lineArrivalsByStopPoint');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}/Arrivals/{stopPointId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // path params
        if ($stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "stopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($stop_point_id),
                $resourcePath
            );
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Prediction[]',
                '/Line/{ids}/Arrivals/{stopPointId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Prediction[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Prediction[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineDisruption
     *
     * Get disruptions for the given line ids
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Disruption[]
     */
    public function lineDisruption($ids)
    {
        list($response) = $this->lineDisruptionWithHttpInfo($ids);
        return $response;
    }

    /**
     * Operation lineDisruptionWithHttpInfo
     *
     * Get disruptions for the given line ids
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Disruption[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineDisruptionWithHttpInfo($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineDisruption');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}/Disruption";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Disruption[]',
                '/Line/{ids}/Disruption'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Disruption[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Disruption[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineDisruptionByMode
     *
     * Get disruptions for all lines of the given modes.
     *
     * @param string[] $modes A comma-separated list of modes e.g. tube,dlr (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Disruption[]
     */
    public function lineDisruptionByMode($modes)
    {
        list($response) = $this->lineDisruptionByModeWithHttpInfo($modes);
        return $response;
    }

    /**
     * Operation lineDisruptionByModeWithHttpInfo
     *
     * Get disruptions for all lines of the given modes.
     *
     * @param string[] $modes A comma-separated list of modes e.g. tube,dlr (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Disruption[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineDisruptionByModeWithHttpInfo($modes)
    {
        // verify the required parameter 'modes' is set
        if ($modes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modes when calling lineDisruptionByMode');
        }
        // parse inputs
        $resourcePath = "/Line/Mode/{modes}/Disruption";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv');
        }
        if ($modes !== null) {
            $resourcePath = str_replace(
                "{" . "modes" . "}",
                $this->apiClient->getSerializer()->toPathValue($modes),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Disruption[]',
                '/Line/Mode/{modes}/Disruption'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Disruption[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Disruption[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineGet
     *
     * Gets lines that match the specified line ids.
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineGet($ids)
    {
        list($response) = $this->lineGetWithHttpInfo($ids);
        return $response;
    }

    /**
     * Operation lineGetWithHttpInfo
     *
     * Gets lines that match the specified line ids.
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineGetWithHttpInfo($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineGet');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/{ids}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineGetByMode
     *
     * Gets lines that serve the given modes.
     *
     * @param string[] $modes A comma-separated list of modes e.g. tube,dlr (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineGetByMode($modes)
    {
        list($response) = $this->lineGetByModeWithHttpInfo($modes);
        return $response;
    }

    /**
     * Operation lineGetByModeWithHttpInfo
     *
     * Gets lines that serve the given modes.
     *
     * @param string[] $modes A comma-separated list of modes e.g. tube,dlr (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineGetByModeWithHttpInfo($modes)
    {
        // verify the required parameter 'modes' is set
        if ($modes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modes when calling lineGetByMode');
        }
        // parse inputs
        $resourcePath = "/Line/Mode/{modes}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv');
        }
        if ($modes !== null) {
            $resourcePath = str_replace(
                "{" . "modes" . "}",
                $this->apiClient->getSerializer()->toPathValue($modes),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/Mode/{modes}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineLineRoutesByIds
     *
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineLineRoutesByIds($ids, $service_types = null)
    {
        list($response) = $this->lineLineRoutesByIdsWithHttpInfo($ids, $service_types);
        return $response;
    }

    /**
     * Operation lineLineRoutesByIdsWithHttpInfo
     *
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineLineRoutesByIdsWithHttpInfo($ids, $service_types = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineLineRoutesByIds');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}/Route";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/{ids}/Route'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineMetaDisruptionCategories
     *
     * Gets a list of valid disruption categories
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return string[]
     */
    public function lineMetaDisruptionCategories()
    {
        list($response) = $this->lineMetaDisruptionCategoriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation lineMetaDisruptionCategoriesWithHttpInfo
     *
     * Gets a list of valid disruption categories
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineMetaDisruptionCategoriesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Line/Meta/DisruptionCategories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/Line/Meta/DisruptionCategories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineMetaModes
     *
     * Gets a list of valid modes
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Mode[]
     */
    public function lineMetaModes()
    {
        list($response) = $this->lineMetaModesWithHttpInfo();
        return $response;
    }

    /**
     * Operation lineMetaModesWithHttpInfo
     *
     * Gets a list of valid modes
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Mode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineMetaModesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Line/Meta/Modes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Mode[]',
                '/Line/Meta/Modes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Mode[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Mode[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineMetaServiceTypes
     *
     * Gets a list of valid ServiceTypes to filter on
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return string[]
     */
    public function lineMetaServiceTypes()
    {
        list($response) = $this->lineMetaServiceTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation lineMetaServiceTypesWithHttpInfo
     *
     * Gets a list of valid ServiceTypes to filter on
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineMetaServiceTypesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Line/Meta/ServiceTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/Line/Meta/ServiceTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineMetaSeverity
     *
     * Gets a list of valid severity codes
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StatusSeverity[]
     */
    public function lineMetaSeverity()
    {
        list($response) = $this->lineMetaSeverityWithHttpInfo();
        return $response;
    }

    /**
     * Operation lineMetaSeverityWithHttpInfo
     *
     * Gets a list of valid severity codes
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StatusSeverity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineMetaSeverityWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Line/Meta/Severity";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StatusSeverity[]',
                '/Line/Meta/Severity'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StatusSeverity[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StatusSeverity[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineRoute
     *
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     *
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineRoute($service_types = null)
    {
        list($response) = $this->lineRouteWithHttpInfo($service_types);
        return $response;
    }

    /**
     * Operation lineRouteWithHttpInfo
     *
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     *
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineRouteWithHttpInfo($service_types = null)
    {
        // parse inputs
        $resourcePath = "/Line/Route";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/Route'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineRouteByMode
     *
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     *
     * @param string[] $modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineRouteByMode($modes, $service_types = null)
    {
        list($response) = $this->lineRouteByModeWithHttpInfo($modes, $service_types);
        return $response;
    }

    /**
     * Operation lineRouteByModeWithHttpInfo
     *
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     *
     * @param string[] $modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineRouteByModeWithHttpInfo($modes, $service_types = null)
    {
        // verify the required parameter 'modes' is set
        if ($modes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modes when calling lineRouteByMode');
        }
        // parse inputs
        $resourcePath = "/Line/Mode/{modes}/Route";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        // path params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv');
        }
        if ($modes !== null) {
            $resourcePath = str_replace(
                "{" . "modes" . "}",
                $this->apiClient->getSerializer()->toPathValue($modes),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/Mode/{modes}/Route'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineRouteSequence
     *
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     *
     * @param string $id A single line id e.g. victoria (required)
     * @param string $direction The direction of travel. Can be inbound or outbound. (required)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param bool $exclude_crowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\RouteSequence
     */
    public function lineRouteSequence($id, $direction, $service_types = null, $exclude_crowding = null)
    {
        list($response) = $this->lineRouteSequenceWithHttpInfo($id, $direction, $service_types, $exclude_crowding);
        return $response;
    }

    /**
     * Operation lineRouteSequenceWithHttpInfo
     *
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     *
     * @param string $id A single line id e.g. victoria (required)
     * @param string $direction The direction of travel. Can be inbound or outbound. (required)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param bool $exclude_crowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\RouteSequence, HTTP status code, HTTP response headers (array of strings)
     */
    public function lineRouteSequenceWithHttpInfo($id, $direction, $service_types = null, $exclude_crowding = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling lineRouteSequence');
        }
        // verify the required parameter 'direction' is set
        if ($direction === null) {
            throw new \InvalidArgumentException('Missing the required parameter $direction when calling lineRouteSequence');
        }
        // parse inputs
        $resourcePath = "/Line/{id}/Route/Sequence/{direction}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        // query params
        if ($exclude_crowding !== null) {
            $queryParams['excludeCrowding'] = $this->apiClient->getSerializer()->toQueryValue($exclude_crowding);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($direction !== null) {
            $resourcePath = str_replace(
                "{" . "direction" . "}",
                $this->apiClient->getSerializer()->toPathValue($direction),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\RouteSequence',
                '/Line/{id}/Route/Sequence/{direction}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\RouteSequence', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\RouteSequence', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineSearch
     *
     * Search for lines or routes matching the query string
     *
     * @param string $query Search term e.g victoria (required)
     * @param string[] $modes Optionally filter by the specified modes (optional)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\RouteSearchResponse
     */
    public function lineSearch($query, $modes = null, $service_types = null)
    {
        list($response) = $this->lineSearchWithHttpInfo($query, $modes, $service_types);
        return $response;
    }

    /**
     * Operation lineSearchWithHttpInfo
     *
     * Search for lines or routes matching the query string
     *
     * @param string $query Search term e.g victoria (required)
     * @param string[] $modes Optionally filter by the specified modes (optional)
     * @param string[] $service_types A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\RouteSearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function lineSearchWithHttpInfo($query, $modes = null, $service_types = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling lineSearch');
        }
        // parse inputs
        $resourcePath = "/Line/Search/{query}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv', true);
        }
        if ($modes !== null) {
            $queryParams['modes'] = $this->apiClient->getSerializer()->toQueryValue($modes);
        }
        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        // path params
        if ($query !== null) {
            $resourcePath = str_replace(
                "{" . "query" . "}",
                $this->apiClient->getSerializer()->toPathValue($query),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\RouteSearchResponse',
                '/Line/Search/{query}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\RouteSearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\RouteSearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineStatus
     *
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param string $start_date  (required)
     * @param string $end_date  (required)
     * @param bool $detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param \DateTime $date_range_start_date  (optional)
     * @param \DateTime $date_range_end_date  (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineStatus($ids, $start_date, $end_date, $detail = null, $date_range_start_date = null, $date_range_end_date = null)
    {
        list($response) = $this->lineStatusWithHttpInfo($ids, $start_date, $end_date, $detail, $date_range_start_date, $date_range_end_date);
        return $response;
    }

    /**
     * Operation lineStatusWithHttpInfo
     *
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param string $start_date  (required)
     * @param string $end_date  (required)
     * @param bool $detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param \DateTime $date_range_start_date  (optional)
     * @param \DateTime $date_range_end_date  (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineStatusWithHttpInfo($ids, $start_date, $end_date, $detail = null, $date_range_start_date = null, $date_range_end_date = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineStatus');
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_date when calling lineStatus');
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_date when calling lineStatus');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}/Status/{startDate}/to/{endDate}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($detail !== null) {
            $queryParams['detail'] = $this->apiClient->getSerializer()->toQueryValue($detail);
        }
        // query params
        if ($date_range_start_date !== null) {
            $queryParams['dateRange.startDate'] = $this->apiClient->getSerializer()->toQueryValue($date_range_start_date);
        }
        // query params
        if ($date_range_end_date !== null) {
            $queryParams['dateRange.endDate'] = $this->apiClient->getSerializer()->toQueryValue($date_range_end_date);
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        // path params
        if ($start_date !== null) {
            $resourcePath = str_replace(
                "{" . "startDate" . "}",
                $this->apiClient->getSerializer()->toPathValue($start_date),
                $resourcePath
            );
        }
        // path params
        if ($end_date !== null) {
            $resourcePath = str_replace(
                "{" . "endDate" . "}",
                $this->apiClient->getSerializer()->toPathValue($end_date),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/{ids}/Status/{startDate}/to/{endDate}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineStatusByIds
     *
     * Gets the line status of for given line ids e.g Minor Delays
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param bool $detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineStatusByIds($ids, $detail = null)
    {
        list($response) = $this->lineStatusByIdsWithHttpInfo($ids, $detail);
        return $response;
    }

    /**
     * Operation lineStatusByIdsWithHttpInfo
     *
     * Gets the line status of for given line ids e.g Minor Delays
     *
     * @param string[] $ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param bool $detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineStatusByIdsWithHttpInfo($ids, $detail = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling lineStatusByIds');
        }
        // parse inputs
        $resourcePath = "/Line/{ids}/Status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($detail !== null) {
            $queryParams['detail'] = $this->apiClient->getSerializer()->toQueryValue($detail);
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/{ids}/Status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineStatusByMode
     *
     * Gets the line status of for all lines for the given modes
     *
     * @param string[] $modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param bool $detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineStatusByMode($modes, $detail = null)
    {
        list($response) = $this->lineStatusByModeWithHttpInfo($modes, $detail);
        return $response;
    }

    /**
     * Operation lineStatusByModeWithHttpInfo
     *
     * Gets the line status of for all lines for the given modes
     *
     * @param string[] $modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param bool $detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineStatusByModeWithHttpInfo($modes, $detail = null)
    {
        // verify the required parameter 'modes' is set
        if ($modes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modes when calling lineStatusByMode');
        }
        // parse inputs
        $resourcePath = "/Line/Mode/{modes}/Status";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($detail !== null) {
            $queryParams['detail'] = $this->apiClient->getSerializer()->toQueryValue($detail);
        }
        // path params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv');
        }
        if ($modes !== null) {
            $resourcePath = str_replace(
                "{" . "modes" . "}",
                $this->apiClient->getSerializer()->toPathValue($modes),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/Mode/{modes}/Status'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineStatusBySeverity
     *
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     *
     * @param int $severity The level of severity (eg: a number from 0 to 14) (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Line[]
     */
    public function lineStatusBySeverity($severity)
    {
        list($response) = $this->lineStatusBySeverityWithHttpInfo($severity);
        return $response;
    }

    /**
     * Operation lineStatusBySeverityWithHttpInfo
     *
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     *
     * @param int $severity The level of severity (eg: a number from 0 to 14) (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Line[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineStatusBySeverityWithHttpInfo($severity)
    {
        // verify the required parameter 'severity' is set
        if ($severity === null) {
            throw new \InvalidArgumentException('Missing the required parameter $severity when calling lineStatusBySeverity');
        }
        // parse inputs
        $resourcePath = "/Line/Status/{severity}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($severity !== null) {
            $resourcePath = str_replace(
                "{" . "severity" . "}",
                $this->apiClient->getSerializer()->toPathValue($severity),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Line[]',
                '/Line/Status/{severity}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Line[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Line[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineStopPoints
     *
     * Gets a list of the stations that serve the given line id
     *
     * @param string $id A single line id e.g. victoria (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPoint[]
     */
    public function lineStopPoints($id)
    {
        list($response) = $this->lineStopPointsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation lineStopPointsWithHttpInfo
     *
     * Gets a list of the stations that serve the given line id
     *
     * @param string $id A single line id e.g. victoria (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function lineStopPointsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling lineStopPoints');
        }
        // parse inputs
        $resourcePath = "/Line/{id}/StopPoints";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPoint[]',
                '/Line/{id}/StopPoints'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineTimetable
     *
     * Gets the timetable for a specified station on the give line
     *
     * @param string $from_stop_point_id The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $id A single line id e.g. victoria (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\TimetableResponse
     */
    public function lineTimetable($from_stop_point_id, $id)
    {
        list($response) = $this->lineTimetableWithHttpInfo($from_stop_point_id, $id);
        return $response;
    }

    /**
     * Operation lineTimetableWithHttpInfo
     *
     * Gets the timetable for a specified station on the give line
     *
     * @param string $from_stop_point_id The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $id A single line id e.g. victoria (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\TimetableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function lineTimetableWithHttpInfo($from_stop_point_id, $id)
    {
        // verify the required parameter 'from_stop_point_id' is set
        if ($from_stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from_stop_point_id when calling lineTimetable');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling lineTimetable');
        }
        // parse inputs
        $resourcePath = "/Line/{id}/Timetable/{fromStopPointId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($from_stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "fromStopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($from_stop_point_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\TimetableResponse',
                '/Line/{id}/Timetable/{fromStopPointId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\TimetableResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\TimetableResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lineTimetableTo
     *
     * Gets the timetable for a specified station on the give line with specified destination
     *
     * @param string $from_stop_point_id The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $id A single line id e.g. victoria (required)
     * @param string $to_stop_point_id The destination stations&#39;s Naptan code (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\TimetableResponse
     */
    public function lineTimetableTo($from_stop_point_id, $id, $to_stop_point_id)
    {
        list($response) = $this->lineTimetableToWithHttpInfo($from_stop_point_id, $id, $to_stop_point_id);
        return $response;
    }

    /**
     * Operation lineTimetableToWithHttpInfo
     *
     * Gets the timetable for a specified station on the give line with specified destination
     *
     * @param string $from_stop_point_id The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $id A single line id e.g. victoria (required)
     * @param string $to_stop_point_id The destination stations&#39;s Naptan code (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\TimetableResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function lineTimetableToWithHttpInfo($from_stop_point_id, $id, $to_stop_point_id)
    {
        // verify the required parameter 'from_stop_point_id' is set
        if ($from_stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from_stop_point_id when calling lineTimetableTo');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling lineTimetableTo');
        }
        // verify the required parameter 'to_stop_point_id' is set
        if ($to_stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $to_stop_point_id when calling lineTimetableTo');
        }
        // parse inputs
        $resourcePath = "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($from_stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "fromStopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($from_stop_point_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($to_stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "toStopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($to_stop_point_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\TimetableResponse',
                '/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\TimetableResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\TimetableResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
