<?php
/**
 * PlaceApi
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Api;

use \Abulia\TflUnified\Swagger\ApiClient;
use \Abulia\TflUnified\Swagger\ApiException;
use \Abulia\TflUnified\Swagger\Configuration;
use \Abulia\TflUnified\Swagger\ObjectSerializer;

/**
 * PlaceApi Class Doc Comment
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlaceApi
{
    /**
     * API Client
     *
     * @var \Abulia\TflUnified\Swagger\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Abulia\TflUnified\Swagger\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Abulia\TflUnified\Swagger\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient $apiClient set the API client
     *
     * @return PlaceApi
     */
    public function setApiClient(\Abulia\TflUnified\Swagger\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation placeGet
     *
     * Gets the place with the given id.
     *
     * @param string $id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param bool $include_children Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Place[]
     */
    public function placeGet($id, $include_children = null)
    {
        list($response) = $this->placeGetWithHttpInfo($id, $include_children);
        return $response;
    }

    /**
     * Operation placeGetWithHttpInfo
     *
     * Gets the place with the given id.
     *
     * @param string $id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param bool $include_children Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Place[], HTTP status code, HTTP response headers (array of strings)
     */
    public function placeGetWithHttpInfo($id, $include_children = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling placeGet');
        }
        // parse inputs
        $resourcePath = "/Place/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($include_children !== null) {
            $queryParams['includeChildren'] = $this->apiClient->getSerializer()->toQueryValue($include_children);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Place[]',
                '/Place/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Place[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Place[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeGetAt
     *
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     *
     * @param string[] $type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param string $lat  (required)
     * @param string $lon  (required)
     * @param double $location_lat  (required)
     * @param double $location_lon  (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Object
     */
    public function placeGetAt($type, $lat, $lon, $location_lat, $location_lon)
    {
        list($response) = $this->placeGetAtWithHttpInfo($type, $lat, $lon, $location_lat, $location_lon);
        return $response;
    }

    /**
     * Operation placeGetAtWithHttpInfo
     *
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     *
     * @param string[] $type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param string $lat  (required)
     * @param string $lon  (required)
     * @param double $location_lat  (required)
     * @param double $location_lon  (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function placeGetAtWithHttpInfo($type, $lat, $lon, $location_lat, $location_lon)
    {
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling placeGetAt');
        }
        // verify the required parameter 'lat' is set
        if ($lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lat when calling placeGetAt');
        }
        // verify the required parameter 'lon' is set
        if ($lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lon when calling placeGetAt');
        }
        // verify the required parameter 'location_lat' is set
        if ($location_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_lat when calling placeGetAt');
        }
        // verify the required parameter 'location_lon' is set
        if ($location_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_lon when calling placeGetAt');
        }
        // parse inputs
        $resourcePath = "/Place/{type}/At/{Lat}/{Lon}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lat !== null) {
            $queryParams['lat'] = $this->apiClient->getSerializer()->toQueryValue($lat);
        }
        // query params
        if ($lon !== null) {
            $queryParams['lon'] = $this->apiClient->getSerializer()->toQueryValue($lon);
        }
        // query params
        if ($location_lat !== null) {
            $queryParams['location.lat'] = $this->apiClient->getSerializer()->toQueryValue($location_lat);
        }
        // query params
        if ($location_lon !== null) {
            $queryParams['location.lon'] = $this->apiClient->getSerializer()->toQueryValue($location_lon);
        }
        // path params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'csv');
        }
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Object',
                '/Place/{type}/At/{Lat}/{Lon}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeGetByGeoBox
     *
     * Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     *
     * @param double $sw_lat  (required)
     * @param double $sw_lon  (required)
     * @param double $ne_lat  (required)
     * @param double $ne_lon  (required)
     * @param string[] $categories an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param bool $include_children Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param string[] $type place types to filter on, or null to return all types (optional)
     * @param bool $active_only An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPoint[]
     */
    public function placeGetByGeoBox($sw_lat, $sw_lon, $ne_lat, $ne_lon, $categories = null, $include_children = null, $type = null, $active_only = null)
    {
        list($response) = $this->placeGetByGeoBoxWithHttpInfo($sw_lat, $sw_lon, $ne_lat, $ne_lon, $categories, $include_children, $type, $active_only);
        return $response;
    }

    /**
     * Operation placeGetByGeoBoxWithHttpInfo
     *
     * Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     *
     * @param double $sw_lat  (required)
     * @param double $sw_lon  (required)
     * @param double $ne_lat  (required)
     * @param double $ne_lon  (required)
     * @param string[] $categories an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param bool $include_children Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param string[] $type place types to filter on, or null to return all types (optional)
     * @param bool $active_only An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function placeGetByGeoBoxWithHttpInfo($sw_lat, $sw_lon, $ne_lat, $ne_lon, $categories = null, $include_children = null, $type = null, $active_only = null)
    {
        // verify the required parameter 'sw_lat' is set
        if ($sw_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sw_lat when calling placeGetByGeoBox');
        }
        // verify the required parameter 'sw_lon' is set
        if ($sw_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sw_lon when calling placeGetByGeoBox');
        }
        // verify the required parameter 'ne_lat' is set
        if ($ne_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ne_lat when calling placeGetByGeoBox');
        }
        // verify the required parameter 'ne_lon' is set
        if ($ne_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ne_lon when calling placeGetByGeoBox');
        }
        // parse inputs
        $resourcePath = "/Place";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($categories)) {
            $categories = $this->apiClient->getSerializer()->serializeCollection($categories, 'csv', true);
        }
        if ($categories !== null) {
            $queryParams['categories'] = $this->apiClient->getSerializer()->toQueryValue($categories);
        }
        // query params
        if ($include_children !== null) {
            $queryParams['includeChildren'] = $this->apiClient->getSerializer()->toQueryValue($include_children);
        }
        // query params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'csv', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $this->apiClient->getSerializer()->toQueryValue($type);
        }
        // query params
        if ($active_only !== null) {
            $queryParams['activeOnly'] = $this->apiClient->getSerializer()->toQueryValue($active_only);
        }
        // query params
        if ($sw_lat !== null) {
            $queryParams['swLat'] = $this->apiClient->getSerializer()->toQueryValue($sw_lat);
        }
        // query params
        if ($sw_lon !== null) {
            $queryParams['swLon'] = $this->apiClient->getSerializer()->toQueryValue($sw_lon);
        }
        // query params
        if ($ne_lat !== null) {
            $queryParams['neLat'] = $this->apiClient->getSerializer()->toQueryValue($ne_lat);
        }
        // query params
        if ($ne_lon !== null) {
            $queryParams['neLon'] = $this->apiClient->getSerializer()->toQueryValue($ne_lon);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPoint[]',
                '/Place'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeGetByType
     *
     * Gets all places of a given type
     *
     * @param string[] $types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param bool $active_only An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Place[]
     */
    public function placeGetByType($types, $active_only = null)
    {
        list($response) = $this->placeGetByTypeWithHttpInfo($types, $active_only);
        return $response;
    }

    /**
     * Operation placeGetByTypeWithHttpInfo
     *
     * Gets all places of a given type
     *
     * @param string[] $types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param bool $active_only An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Place[], HTTP status code, HTTP response headers (array of strings)
     */
    public function placeGetByTypeWithHttpInfo($types, $active_only = null)
    {
        // verify the required parameter 'types' is set
        if ($types === null) {
            throw new \InvalidArgumentException('Missing the required parameter $types when calling placeGetByType');
        }
        // parse inputs
        $resourcePath = "/Place/Type/{types}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($active_only !== null) {
            $queryParams['activeOnly'] = $this->apiClient->getSerializer()->toQueryValue($active_only);
        }
        // path params
        if (is_array($types)) {
            $types = $this->apiClient->getSerializer()->serializeCollection($types, 'csv');
        }
        if ($types !== null) {
            $resourcePath = str_replace(
                "{" . "types" . "}",
                $this->apiClient->getSerializer()->toPathValue($types),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Place[]',
                '/Place/Type/{types}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Place[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Place[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeGetOverlay
     *
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     *
     * @param int $z The zoom level (required)
     * @param string[] $type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param int $width The width of the requested overlay. (required)
     * @param int $height The height of the requested overlay. (required)
     * @param string $lat  (required)
     * @param string $lon  (required)
     * @param double $location_lat  (required)
     * @param double $location_lon  (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function placeGetOverlay($z, $type, $width, $height, $lat, $lon, $location_lat, $location_lon)
    {
        list($response) = $this->placeGetOverlayWithHttpInfo($z, $type, $width, $height, $lat, $lon, $location_lat, $location_lon);
        return $response;
    }

    /**
     * Operation placeGetOverlayWithHttpInfo
     *
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     *
     * @param int $z The zoom level (required)
     * @param string[] $type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param int $width The width of the requested overlay. (required)
     * @param int $height The height of the requested overlay. (required)
     * @param string $lat  (required)
     * @param string $lon  (required)
     * @param double $location_lat  (required)
     * @param double $location_lon  (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function placeGetOverlayWithHttpInfo($z, $type, $width, $height, $lat, $lon, $location_lat, $location_lon)
    {
        // verify the required parameter 'z' is set
        if ($z === null) {
            throw new \InvalidArgumentException('Missing the required parameter $z when calling placeGetOverlay');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling placeGetOverlay');
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException('Missing the required parameter $width when calling placeGetOverlay');
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException('Missing the required parameter $height when calling placeGetOverlay');
        }
        // verify the required parameter 'lat' is set
        if ($lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lat when calling placeGetOverlay');
        }
        // verify the required parameter 'lon' is set
        if ($lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lon when calling placeGetOverlay');
        }
        // verify the required parameter 'location_lat' is set
        if ($location_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_lat when calling placeGetOverlay');
        }
        // verify the required parameter 'location_lon' is set
        if ($location_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_lon when calling placeGetOverlay');
        }
        // parse inputs
        $resourcePath = "/Place/{type}/overlay/{z}/{lat}/{lon}/{width}/{height}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['image/png']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($location_lat !== null) {
            $queryParams['location.lat'] = $this->apiClient->getSerializer()->toQueryValue($location_lat);
        }
        // query params
        if ($location_lon !== null) {
            $queryParams['location.lon'] = $this->apiClient->getSerializer()->toQueryValue($location_lon);
        }
        // path params
        if ($z !== null) {
            $resourcePath = str_replace(
                "{" . "z" . "}",
                $this->apiClient->getSerializer()->toPathValue($z),
                $resourcePath
            );
        }
        // path params
        if (is_array($type)) {
            $type = $this->apiClient->getSerializer()->serializeCollection($type, 'csv');
        }
        if ($type !== null) {
            $resourcePath = str_replace(
                "{" . "type" . "}",
                $this->apiClient->getSerializer()->toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($width !== null) {
            $resourcePath = str_replace(
                "{" . "width" . "}",
                $this->apiClient->getSerializer()->toPathValue($width),
                $resourcePath
            );
        }
        // path params
        if ($height !== null) {
            $resourcePath = str_replace(
                "{" . "height" . "}",
                $this->apiClient->getSerializer()->toPathValue($height),
                $resourcePath
            );
        }
        // path params
        if ($lat !== null) {
            $resourcePath = str_replace(
                "{" . "lat" . "}",
                $this->apiClient->getSerializer()->toPathValue($lat),
                $resourcePath
            );
        }
        // path params
        if ($lon !== null) {
            $resourcePath = str_replace(
                "{" . "lon" . "}",
                $this->apiClient->getSerializer()->toPathValue($lon),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Place/{type}/overlay/{z}/{lat}/{lon}/{width}/{height}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeGetStreetsByPostCode
     *
     * Gets the set of streets associated with a post code.
     *
     * @param string $postcode  (required)
     * @param string $postcode_input_postcode  (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Object
     */
    public function placeGetStreetsByPostCode($postcode, $postcode_input_postcode = null)
    {
        list($response) = $this->placeGetStreetsByPostCodeWithHttpInfo($postcode, $postcode_input_postcode);
        return $response;
    }

    /**
     * Operation placeGetStreetsByPostCodeWithHttpInfo
     *
     * Gets the set of streets associated with a post code.
     *
     * @param string $postcode  (required)
     * @param string $postcode_input_postcode  (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function placeGetStreetsByPostCodeWithHttpInfo($postcode, $postcode_input_postcode = null)
    {
        // verify the required parameter 'postcode' is set
        if ($postcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $postcode when calling placeGetStreetsByPostCode');
        }
        if (!is_null($postcode_input_postcode) && !preg_match("/^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$/", $postcode_input_postcode)) {
            throw new \InvalidArgumentException("invalid value for \"postcode_input_postcode\" when calling PlaceApi.placeGetStreetsByPostCode, must conform to the pattern /^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$/.");
        }

        // parse inputs
        $resourcePath = "/Place/Address/Streets/{Postcode}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = $this->apiClient->getSerializer()->toQueryValue($postcode);
        }
        // query params
        if ($postcode_input_postcode !== null) {
            $queryParams['postcodeInput.postcode'] = $this->apiClient->getSerializer()->toQueryValue($postcode_input_postcode);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Object',
                '/Place/Address/Streets/{Postcode}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeMetaCategories
     *
     * Gets a list of all of the available place property categories and keys.
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\PlaceCategory[]
     */
    public function placeMetaCategories()
    {
        list($response) = $this->placeMetaCategoriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation placeMetaCategoriesWithHttpInfo
     *
     * Gets a list of all of the available place property categories and keys.
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\PlaceCategory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function placeMetaCategoriesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Place/Meta/Categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\PlaceCategory[]',
                '/Place/Meta/Categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\PlaceCategory[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\PlaceCategory[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeMetaPlaceTypes
     *
     * Gets a list of the available types of Place.
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\PlaceCategory[]
     */
    public function placeMetaPlaceTypes()
    {
        list($response) = $this->placeMetaPlaceTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation placeMetaPlaceTypesWithHttpInfo
     *
     * Gets a list of the available types of Place.
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\PlaceCategory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function placeMetaPlaceTypesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Place/Meta/PlaceTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\PlaceCategory[]',
                '/Place/Meta/PlaceTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\PlaceCategory[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\PlaceCategory[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation placeSearch
     *
     * Gets all places that matches the given query
     *
     * @param string $name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param string[] $types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Place[]
     */
    public function placeSearch($name, $types = null)
    {
        list($response) = $this->placeSearchWithHttpInfo($name, $types);
        return $response;
    }

    /**
     * Operation placeSearchWithHttpInfo
     *
     * Gets all places that matches the given query
     *
     * @param string $name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param string[] $types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Place[], HTTP status code, HTTP response headers (array of strings)
     */
    public function placeSearchWithHttpInfo($name, $types = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling placeSearch');
        }
        // parse inputs
        $resourcePath = "/Place/Search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if (is_array($types)) {
            $types = $this->apiClient->getSerializer()->serializeCollection($types, 'csv', true);
        }
        if ($types !== null) {
            $queryParams['types'] = $this->apiClient->getSerializer()->toQueryValue($types);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Place[]',
                '/Place/Search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Place[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Place[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
