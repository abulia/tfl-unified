<?php
/**
 * CabwiseApi
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Api;

use \Abulia\TflUnified\Swagger\ApiClient;
use \Abulia\TflUnified\Swagger\ApiException;
use \Abulia\TflUnified\Swagger\Configuration;
use \Abulia\TflUnified\Swagger\ObjectSerializer;

/**
 * CabwiseApi Class Doc Comment
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CabwiseApi
{
    /**
     * API Client
     *
     * @var \Abulia\TflUnified\Swagger\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Abulia\TflUnified\Swagger\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Abulia\TflUnified\Swagger\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient $apiClient set the API client
     *
     * @return CabwiseApi
     */
    public function setApiClient(\Abulia\TflUnified\Swagger\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cabwiseGet
     *
     * Gets taxis and minicabs contact information
     *
     * @param double $lat Latitude (required)
     * @param double $lon Longitude (required)
     * @param string $optype Operator Type e.g Minicab, Executive, Limousine (optional)
     * @param string $wc Wheelchair accessible (optional)
     * @param double $radius The radius of the bounding circle in metres (optional)
     * @param string $name Trading name of operating company (optional)
     * @param int $max_results An optional parameter to limit the number of results return. Default and maximum is 20. (optional)
     * @param bool $legacy_format Legacy Format (optional)
     * @param bool $force_xml Force Xml (optional)
     * @param bool $twenty_four_seven_only Twenty Four Seven Only (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Object
     */
    public function cabwiseGet($lat, $lon, $optype = null, $wc = null, $radius = null, $name = null, $max_results = null, $legacy_format = null, $force_xml = null, $twenty_four_seven_only = null)
    {
        list($response) = $this->cabwiseGetWithHttpInfo($lat, $lon, $optype, $wc, $radius, $name, $max_results, $legacy_format, $force_xml, $twenty_four_seven_only);
        return $response;
    }

    /**
     * Operation cabwiseGetWithHttpInfo
     *
     * Gets taxis and minicabs contact information
     *
     * @param double $lat Latitude (required)
     * @param double $lon Longitude (required)
     * @param string $optype Operator Type e.g Minicab, Executive, Limousine (optional)
     * @param string $wc Wheelchair accessible (optional)
     * @param double $radius The radius of the bounding circle in metres (optional)
     * @param string $name Trading name of operating company (optional)
     * @param int $max_results An optional parameter to limit the number of results return. Default and maximum is 20. (optional)
     * @param bool $legacy_format Legacy Format (optional)
     * @param bool $force_xml Force Xml (optional)
     * @param bool $twenty_four_seven_only Twenty Four Seven Only (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function cabwiseGetWithHttpInfo($lat, $lon, $optype = null, $wc = null, $radius = null, $name = null, $max_results = null, $legacy_format = null, $force_xml = null, $twenty_four_seven_only = null)
    {
        // verify the required parameter 'lat' is set
        if ($lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lat when calling cabwiseGet');
        }
        // verify the required parameter 'lon' is set
        if ($lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lon when calling cabwiseGet');
        }
        // parse inputs
        $resourcePath = "/Cabwise/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($lat !== null) {
            $queryParams['lat'] = $this->apiClient->getSerializer()->toQueryValue($lat);
        }
        // query params
        if ($lon !== null) {
            $queryParams['lon'] = $this->apiClient->getSerializer()->toQueryValue($lon);
        }
        // query params
        if ($optype !== null) {
            $queryParams['optype'] = $this->apiClient->getSerializer()->toQueryValue($optype);
        }
        // query params
        if ($wc !== null) {
            $queryParams['wc'] = $this->apiClient->getSerializer()->toQueryValue($wc);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = $this->apiClient->getSerializer()->toQueryValue($max_results);
        }
        // query params
        if ($legacy_format !== null) {
            $queryParams['legacyFormat'] = $this->apiClient->getSerializer()->toQueryValue($legacy_format);
        }
        // query params
        if ($force_xml !== null) {
            $queryParams['forceXml'] = $this->apiClient->getSerializer()->toQueryValue($force_xml);
        }
        // query params
        if ($twenty_four_seven_only !== null) {
            $queryParams['twentyFourSevenOnly'] = $this->apiClient->getSerializer()->toQueryValue($twenty_four_seven_only);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Object',
                '/Cabwise/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
