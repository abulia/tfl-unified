<?php
/**
 * TravelTimeApi
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Api;

use \Abulia\TflUnified\Swagger\ApiClient;
use \Abulia\TflUnified\Swagger\ApiException;
use \Abulia\TflUnified\Swagger\Configuration;
use \Abulia\TflUnified\Swagger\ObjectSerializer;

/**
 * TravelTimeApi Class Doc Comment
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TravelTimeApi
{
    /**
     * API Client
     *
     * @var \Abulia\TflUnified\Swagger\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Abulia\TflUnified\Swagger\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Abulia\TflUnified\Swagger\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient $apiClient set the API client
     *
     * @return TravelTimeApi
     */
    public function setApiClient(\Abulia\TflUnified\Swagger\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation travelTimeGetCompareOverlay
     *
     * Gets the TravelTime overlay.
     *
     * @param int $z The zoom level. (required)
     * @param double $pin_lat The latitude of the pin. (required)
     * @param double $pin_lon The longitude of the pin. (required)
     * @param double $map_center_lat The map center latitude. (required)
     * @param double $map_center_lon The map center longitude. (required)
     * @param string $scenario_title The title of the scenario. (required)
     * @param string $time_of_day_id The id for the time of day (AM/INTER/PM) (required)
     * @param string $mode_id The id of the mode. (required)
     * @param int $width The width of the requested overlay. (required)
     * @param int $height The height of the requested overlay. (required)
     * @param string $direction The direction of travel. (required)
     * @param int $travel_time_interval The total minutes between the travel time bands (required)
     * @param string $compare_type  (required)
     * @param string $compare_value  (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Object
     */
    public function travelTimeGetCompareOverlay($z, $pin_lat, $pin_lon, $map_center_lat, $map_center_lon, $scenario_title, $time_of_day_id, $mode_id, $width, $height, $direction, $travel_time_interval, $compare_type, $compare_value)
    {
        list($response) = $this->travelTimeGetCompareOverlayWithHttpInfo($z, $pin_lat, $pin_lon, $map_center_lat, $map_center_lon, $scenario_title, $time_of_day_id, $mode_id, $width, $height, $direction, $travel_time_interval, $compare_type, $compare_value);
        return $response;
    }

    /**
     * Operation travelTimeGetCompareOverlayWithHttpInfo
     *
     * Gets the TravelTime overlay.
     *
     * @param int $z The zoom level. (required)
     * @param double $pin_lat The latitude of the pin. (required)
     * @param double $pin_lon The longitude of the pin. (required)
     * @param double $map_center_lat The map center latitude. (required)
     * @param double $map_center_lon The map center longitude. (required)
     * @param string $scenario_title The title of the scenario. (required)
     * @param string $time_of_day_id The id for the time of day (AM/INTER/PM) (required)
     * @param string $mode_id The id of the mode. (required)
     * @param int $width The width of the requested overlay. (required)
     * @param int $height The height of the requested overlay. (required)
     * @param string $direction The direction of travel. (required)
     * @param int $travel_time_interval The total minutes between the travel time bands (required)
     * @param string $compare_type  (required)
     * @param string $compare_value  (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelTimeGetCompareOverlayWithHttpInfo($z, $pin_lat, $pin_lon, $map_center_lat, $map_center_lon, $scenario_title, $time_of_day_id, $mode_id, $width, $height, $direction, $travel_time_interval, $compare_type, $compare_value)
    {
        // verify the required parameter 'z' is set
        if ($z === null) {
            throw new \InvalidArgumentException('Missing the required parameter $z when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'pin_lat' is set
        if ($pin_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pin_lat when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'pin_lon' is set
        if ($pin_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pin_lon when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'map_center_lat' is set
        if ($map_center_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $map_center_lat when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'map_center_lon' is set
        if ($map_center_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $map_center_lon when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'scenario_title' is set
        if ($scenario_title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scenario_title when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'time_of_day_id' is set
        if ($time_of_day_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $time_of_day_id when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'mode_id' is set
        if ($mode_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_id when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException('Missing the required parameter $width when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException('Missing the required parameter $height when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'direction' is set
        if ($direction === null) {
            throw new \InvalidArgumentException('Missing the required parameter $direction when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'travel_time_interval' is set
        if ($travel_time_interval === null) {
            throw new \InvalidArgumentException('Missing the required parameter $travel_time_interval when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'compare_type' is set
        if ($compare_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $compare_type when calling travelTimeGetCompareOverlay');
        }
        // verify the required parameter 'compare_value' is set
        if ($compare_value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $compare_value when calling travelTimeGetCompareOverlay');
        }
        // parse inputs
        $resourcePath = "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($scenario_title !== null) {
            $queryParams['scenarioTitle'] = $this->apiClient->getSerializer()->toQueryValue($scenario_title);
        }
        // query params
        if ($time_of_day_id !== null) {
            $queryParams['timeOfDayId'] = $this->apiClient->getSerializer()->toQueryValue($time_of_day_id);
        }
        // query params
        if ($mode_id !== null) {
            $queryParams['modeId'] = $this->apiClient->getSerializer()->toQueryValue($mode_id);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // query params
        if ($travel_time_interval !== null) {
            $queryParams['travelTimeInterval'] = $this->apiClient->getSerializer()->toQueryValue($travel_time_interval);
        }
        // query params
        if ($compare_type !== null) {
            $queryParams['compareType'] = $this->apiClient->getSerializer()->toQueryValue($compare_type);
        }
        // query params
        if ($compare_value !== null) {
            $queryParams['compareValue'] = $this->apiClient->getSerializer()->toQueryValue($compare_value);
        }
        // path params
        if ($z !== null) {
            $resourcePath = str_replace(
                "{" . "z" . "}",
                $this->apiClient->getSerializer()->toPathValue($z),
                $resourcePath
            );
        }
        // path params
        if ($pin_lat !== null) {
            $resourcePath = str_replace(
                "{" . "pinLat" . "}",
                $this->apiClient->getSerializer()->toPathValue($pin_lat),
                $resourcePath
            );
        }
        // path params
        if ($pin_lon !== null) {
            $resourcePath = str_replace(
                "{" . "pinLon" . "}",
                $this->apiClient->getSerializer()->toPathValue($pin_lon),
                $resourcePath
            );
        }
        // path params
        if ($map_center_lat !== null) {
            $resourcePath = str_replace(
                "{" . "mapCenterLat" . "}",
                $this->apiClient->getSerializer()->toPathValue($map_center_lat),
                $resourcePath
            );
        }
        // path params
        if ($map_center_lon !== null) {
            $resourcePath = str_replace(
                "{" . "mapCenterLon" . "}",
                $this->apiClient->getSerializer()->toPathValue($map_center_lon),
                $resourcePath
            );
        }
        // path params
        if ($width !== null) {
            $resourcePath = str_replace(
                "{" . "width" . "}",
                $this->apiClient->getSerializer()->toPathValue($width),
                $resourcePath
            );
        }
        // path params
        if ($height !== null) {
            $resourcePath = str_replace(
                "{" . "height" . "}",
                $this->apiClient->getSerializer()->toPathValue($height),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Object',
                '/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation travelTimeGetOverlay
     *
     * Gets the TravelTime overlay.
     *
     * @param int $z The zoom level. (required)
     * @param double $pin_lat The latitude of the pin. (required)
     * @param double $pin_lon The longitude of the pin. (required)
     * @param double $map_center_lat The map center latitude. (required)
     * @param double $map_center_lon The map center longitude. (required)
     * @param string $scenario_title The title of the scenario. (required)
     * @param string $time_of_day_id The id for the time of day (AM/INTER/PM) (required)
     * @param string $mode_id The id of the mode. (required)
     * @param int $width The width of the requested overlay. (required)
     * @param int $height The height of the requested overlay. (required)
     * @param string $direction The direction of travel. (required)
     * @param int $travel_time_interval The total minutes between the travel time bands (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Object
     */
    public function travelTimeGetOverlay($z, $pin_lat, $pin_lon, $map_center_lat, $map_center_lon, $scenario_title, $time_of_day_id, $mode_id, $width, $height, $direction, $travel_time_interval)
    {
        list($response) = $this->travelTimeGetOverlayWithHttpInfo($z, $pin_lat, $pin_lon, $map_center_lat, $map_center_lon, $scenario_title, $time_of_day_id, $mode_id, $width, $height, $direction, $travel_time_interval);
        return $response;
    }

    /**
     * Operation travelTimeGetOverlayWithHttpInfo
     *
     * Gets the TravelTime overlay.
     *
     * @param int $z The zoom level. (required)
     * @param double $pin_lat The latitude of the pin. (required)
     * @param double $pin_lon The longitude of the pin. (required)
     * @param double $map_center_lat The map center latitude. (required)
     * @param double $map_center_lon The map center longitude. (required)
     * @param string $scenario_title The title of the scenario. (required)
     * @param string $time_of_day_id The id for the time of day (AM/INTER/PM) (required)
     * @param string $mode_id The id of the mode. (required)
     * @param int $width The width of the requested overlay. (required)
     * @param int $height The height of the requested overlay. (required)
     * @param string $direction The direction of travel. (required)
     * @param int $travel_time_interval The total minutes between the travel time bands (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelTimeGetOverlayWithHttpInfo($z, $pin_lat, $pin_lon, $map_center_lat, $map_center_lon, $scenario_title, $time_of_day_id, $mode_id, $width, $height, $direction, $travel_time_interval)
    {
        // verify the required parameter 'z' is set
        if ($z === null) {
            throw new \InvalidArgumentException('Missing the required parameter $z when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'pin_lat' is set
        if ($pin_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pin_lat when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'pin_lon' is set
        if ($pin_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pin_lon when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'map_center_lat' is set
        if ($map_center_lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $map_center_lat when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'map_center_lon' is set
        if ($map_center_lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $map_center_lon when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'scenario_title' is set
        if ($scenario_title === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scenario_title when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'time_of_day_id' is set
        if ($time_of_day_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $time_of_day_id when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'mode_id' is set
        if ($mode_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_id when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException('Missing the required parameter $width when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException('Missing the required parameter $height when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'direction' is set
        if ($direction === null) {
            throw new \InvalidArgumentException('Missing the required parameter $direction when calling travelTimeGetOverlay');
        }
        // verify the required parameter 'travel_time_interval' is set
        if ($travel_time_interval === null) {
            throw new \InvalidArgumentException('Missing the required parameter $travel_time_interval when calling travelTimeGetOverlay');
        }
        // parse inputs
        $resourcePath = "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($scenario_title !== null) {
            $queryParams['scenarioTitle'] = $this->apiClient->getSerializer()->toQueryValue($scenario_title);
        }
        // query params
        if ($time_of_day_id !== null) {
            $queryParams['timeOfDayId'] = $this->apiClient->getSerializer()->toQueryValue($time_of_day_id);
        }
        // query params
        if ($mode_id !== null) {
            $queryParams['modeId'] = $this->apiClient->getSerializer()->toQueryValue($mode_id);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // query params
        if ($travel_time_interval !== null) {
            $queryParams['travelTimeInterval'] = $this->apiClient->getSerializer()->toQueryValue($travel_time_interval);
        }
        // path params
        if ($z !== null) {
            $resourcePath = str_replace(
                "{" . "z" . "}",
                $this->apiClient->getSerializer()->toPathValue($z),
                $resourcePath
            );
        }
        // path params
        if ($pin_lat !== null) {
            $resourcePath = str_replace(
                "{" . "pinLat" . "}",
                $this->apiClient->getSerializer()->toPathValue($pin_lat),
                $resourcePath
            );
        }
        // path params
        if ($pin_lon !== null) {
            $resourcePath = str_replace(
                "{" . "pinLon" . "}",
                $this->apiClient->getSerializer()->toPathValue($pin_lon),
                $resourcePath
            );
        }
        // path params
        if ($map_center_lat !== null) {
            $resourcePath = str_replace(
                "{" . "mapCenterLat" . "}",
                $this->apiClient->getSerializer()->toPathValue($map_center_lat),
                $resourcePath
            );
        }
        // path params
        if ($map_center_lon !== null) {
            $resourcePath = str_replace(
                "{" . "mapCenterLon" . "}",
                $this->apiClient->getSerializer()->toPathValue($map_center_lon),
                $resourcePath
            );
        }
        // path params
        if ($width !== null) {
            $resourcePath = str_replace(
                "{" . "width" . "}",
                $this->apiClient->getSerializer()->toPathValue($width),
                $resourcePath
            );
        }
        // path params
        if ($height !== null) {
            $resourcePath = str_replace(
                "{" . "height" . "}",
                $this->apiClient->getSerializer()->toPathValue($height),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Object',
                '/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
