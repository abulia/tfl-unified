<?php
/**
 * StopPointApi
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Api;

use \Abulia\TflUnified\Swagger\ApiClient;
use \Abulia\TflUnified\Swagger\ApiException;
use \Abulia\TflUnified\Swagger\Configuration;
use \Abulia\TflUnified\Swagger\ObjectSerializer;

/**
 * StopPointApi Class Doc Comment
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StopPointApi
{
    /**
     * API Client
     *
     * @var \Abulia\TflUnified\Swagger\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Abulia\TflUnified\Swagger\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Abulia\TflUnified\Swagger\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Abulia\TflUnified\Swagger\ApiClient $apiClient set the API client
     *
     * @return StopPointApi
     */
    public function setApiClient(\Abulia\TflUnified\Swagger\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation stopPointArrivals
     *
     * Gets the list of arrival predictions for the given stop point id
     *
     * @param string $id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Prediction[]
     */
    public function stopPointArrivals($id)
    {
        list($response) = $this->stopPointArrivalsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation stopPointArrivalsWithHttpInfo
     *
     * Gets the list of arrival predictions for the given stop point id
     *
     * @param string $id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Prediction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointArrivalsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointArrivals');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{id}/Arrivals";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Prediction[]',
                '/StopPoint/{id}/Arrivals'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Prediction[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Prediction[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointCrowding
     *
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
     *
     * @param string $id The Naptan id of the stop (required)
     * @param string $line A particular line e.g. victoria, circle, northern etc. (required)
     * @param string $direction The direction of travel. Can be inbound or outbound. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPoint[]
     */
    public function stopPointCrowding($id, $line, $direction)
    {
        list($response) = $this->stopPointCrowdingWithHttpInfo($id, $line, $direction);
        return $response;
    }

    /**
     * Operation stopPointCrowdingWithHttpInfo
     *
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
     *
     * @param string $id The Naptan id of the stop (required)
     * @param string $line A particular line e.g. victoria, circle, northern etc. (required)
     * @param string $direction The direction of travel. Can be inbound or outbound. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointCrowdingWithHttpInfo($id, $line, $direction)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointCrowding');
        }
        // verify the required parameter 'line' is set
        if ($line === null) {
            throw new \InvalidArgumentException('Missing the required parameter $line when calling stopPointCrowding');
        }
        // verify the required parameter 'direction' is set
        if ($direction === null) {
            throw new \InvalidArgumentException('Missing the required parameter $direction when calling stopPointCrowding');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{id}/Crowding/{line}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($line !== null) {
            $resourcePath = str_replace(
                "{" . "line" . "}",
                $this->apiClient->getSerializer()->toPathValue($line),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPoint[]',
                '/StopPoint/{id}/Crowding/{line}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointDirection
     *
     * Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -&gt; to.
     *
     * @param string $id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $to_stop_point_id Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $line_id Optional line id filter e.g. victoria (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return string
     */
    public function stopPointDirection($id, $to_stop_point_id, $line_id = null)
    {
        list($response) = $this->stopPointDirectionWithHttpInfo($id, $to_stop_point_id, $line_id);
        return $response;
    }

    /**
     * Operation stopPointDirectionWithHttpInfo
     *
     * Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -&gt; to.
     *
     * @param string $id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $to_stop_point_id Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string $line_id Optional line id filter e.g. victoria (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointDirectionWithHttpInfo($id, $to_stop_point_id, $line_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointDirection');
        }
        // verify the required parameter 'to_stop_point_id' is set
        if ($to_stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $to_stop_point_id when calling stopPointDirection');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{id}/DirectionTo/{toStopPointId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($line_id !== null) {
            $queryParams['lineId'] = $this->apiClient->getSerializer()->toQueryValue($line_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($to_stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "toStopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($to_stop_point_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/StopPoint/{id}/DirectionTo/{toStopPointId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointDisruption
     *
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     *
     * @param string[] $ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param bool $get_family Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     * @param bool $include_route_blocked_stops  (optional)
     * @param bool $flatten_response Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\DisruptedPoint[]
     */
    public function stopPointDisruption($ids, $get_family = null, $include_route_blocked_stops = null, $flatten_response = null)
    {
        list($response) = $this->stopPointDisruptionWithHttpInfo($ids, $get_family, $include_route_blocked_stops, $flatten_response);
        return $response;
    }

    /**
     * Operation stopPointDisruptionWithHttpInfo
     *
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     *
     * @param string[] $ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param bool $get_family Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     * @param bool $include_route_blocked_stops  (optional)
     * @param bool $flatten_response Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\DisruptedPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointDisruptionWithHttpInfo($ids, $get_family = null, $include_route_blocked_stops = null, $flatten_response = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling stopPointDisruption');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{ids}/Disruption";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($get_family !== null) {
            $queryParams['getFamily'] = $this->apiClient->getSerializer()->toQueryValue($get_family);
        }
        // query params
        if ($include_route_blocked_stops !== null) {
            $queryParams['includeRouteBlockedStops'] = $this->apiClient->getSerializer()->toQueryValue($include_route_blocked_stops);
        }
        // query params
        if ($flatten_response !== null) {
            $queryParams['flattenResponse'] = $this->apiClient->getSerializer()->toQueryValue($flatten_response);
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\DisruptedPoint[]',
                '/StopPoint/{ids}/Disruption'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\DisruptedPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\DisruptedPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointDisruptionByMode
     *
     * Gets a distinct list of disrupted stop points for the given modes
     *
     * @param string[] $modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param bool $include_route_blocked_stops  (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\DisruptedPoint[]
     */
    public function stopPointDisruptionByMode($modes, $include_route_blocked_stops = null)
    {
        list($response) = $this->stopPointDisruptionByModeWithHttpInfo($modes, $include_route_blocked_stops);
        return $response;
    }

    /**
     * Operation stopPointDisruptionByModeWithHttpInfo
     *
     * Gets a distinct list of disrupted stop points for the given modes
     *
     * @param string[] $modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param bool $include_route_blocked_stops  (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\DisruptedPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointDisruptionByModeWithHttpInfo($modes, $include_route_blocked_stops = null)
    {
        // verify the required parameter 'modes' is set
        if ($modes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modes when calling stopPointDisruptionByMode');
        }
        // parse inputs
        $resourcePath = "/StopPoint/Mode/{modes}/Disruption";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($include_route_blocked_stops !== null) {
            $queryParams['includeRouteBlockedStops'] = $this->apiClient->getSerializer()->toQueryValue($include_route_blocked_stops);
        }
        // path params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv');
        }
        if ($modes !== null) {
            $resourcePath = str_replace(
                "{" . "modes" . "}",
                $this->apiClient->getSerializer()->toPathValue($modes),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\DisruptedPoint[]',
                '/StopPoint/Mode/{modes}/Disruption'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\DisruptedPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\DisruptedPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGet
     *
     * Gets a list of StopPoints corresponding to the given list of stop ids.
     *
     * @param string[] $ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param bool $include_crowding_data Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPoint[]
     */
    public function stopPointGet($ids, $include_crowding_data = null)
    {
        list($response) = $this->stopPointGetWithHttpInfo($ids, $include_crowding_data);
        return $response;
    }

    /**
     * Operation stopPointGetWithHttpInfo
     *
     * Gets a list of StopPoints corresponding to the given list of stop ids.
     *
     * @param string[] $ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param bool $include_crowding_data Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetWithHttpInfo($ids, $include_crowding_data = null)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ids when calling stopPointGet');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{ids}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($include_crowding_data !== null) {
            $queryParams['includeCrowdingData'] = $this->apiClient->getSerializer()->toQueryValue($include_crowding_data);
        }
        // path params
        if (is_array($ids)) {
            $ids = $this->apiClient->getSerializer()->serializeCollection($ids, 'csv');
        }
        if ($ids !== null) {
            $resourcePath = str_replace(
                "{" . "ids" . "}",
                $this->apiClient->getSerializer()->toPathValue($ids),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPoint[]',
                '/StopPoint/{ids}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetByGeoPoint
     *
     * Gets a list of StopPoints within {radius} by the specified criteria
     *
     * @param string[] $stop_types a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) (required)
     * @param double $lat  (required)
     * @param double $lon  (required)
     * @param int $radius the radius of the bounding circle in metres (default : 200) (optional)
     * @param bool $use_stop_point_hierarchy Re-arrange the output into a parent/child hierarchy (optional)
     * @param string[] $modes the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     * @param string[] $categories an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     * @param bool $return_lines true to return the lines that each stop point serves as a nested resource (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPointsResponse
     */
    public function stopPointGetByGeoPoint($stop_types, $lat, $lon, $radius = null, $use_stop_point_hierarchy = null, $modes = null, $categories = null, $return_lines = null)
    {
        list($response) = $this->stopPointGetByGeoPointWithHttpInfo($stop_types, $lat, $lon, $radius, $use_stop_point_hierarchy, $modes, $categories, $return_lines);
        return $response;
    }

    /**
     * Operation stopPointGetByGeoPointWithHttpInfo
     *
     * Gets a list of StopPoints within {radius} by the specified criteria
     *
     * @param string[] $stop_types a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) (required)
     * @param double $lat  (required)
     * @param double $lon  (required)
     * @param int $radius the radius of the bounding circle in metres (default : 200) (optional)
     * @param bool $use_stop_point_hierarchy Re-arrange the output into a parent/child hierarchy (optional)
     * @param string[] $modes the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     * @param string[] $categories an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     * @param bool $return_lines true to return the lines that each stop point serves as a nested resource (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPointsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetByGeoPointWithHttpInfo($stop_types, $lat, $lon, $radius = null, $use_stop_point_hierarchy = null, $modes = null, $categories = null, $return_lines = null)
    {
        // verify the required parameter 'stop_types' is set
        if ($stop_types === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stop_types when calling stopPointGetByGeoPoint');
        }
        // verify the required parameter 'lat' is set
        if ($lat === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lat when calling stopPointGetByGeoPoint');
        }
        // verify the required parameter 'lon' is set
        if ($lon === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lon when calling stopPointGetByGeoPoint');
        }
        // parse inputs
        $resourcePath = "/StopPoint";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($stop_types)) {
            $stop_types = $this->apiClient->getSerializer()->serializeCollection($stop_types, 'csv', true);
        }
        if ($stop_types !== null) {
            $queryParams['stopTypes'] = $this->apiClient->getSerializer()->toQueryValue($stop_types);
        }
        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($use_stop_point_hierarchy !== null) {
            $queryParams['useStopPointHierarchy'] = $this->apiClient->getSerializer()->toQueryValue($use_stop_point_hierarchy);
        }
        // query params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv', true);
        }
        if ($modes !== null) {
            $queryParams['modes'] = $this->apiClient->getSerializer()->toQueryValue($modes);
        }
        // query params
        if (is_array($categories)) {
            $categories = $this->apiClient->getSerializer()->serializeCollection($categories, 'csv', true);
        }
        if ($categories !== null) {
            $queryParams['categories'] = $this->apiClient->getSerializer()->toQueryValue($categories);
        }
        // query params
        if ($return_lines !== null) {
            $queryParams['returnLines'] = $this->apiClient->getSerializer()->toQueryValue($return_lines);
        }
        // query params
        if ($lat !== null) {
            $queryParams['lat'] = $this->apiClient->getSerializer()->toQueryValue($lat);
        }
        // query params
        if ($lon !== null) {
            $queryParams['lon'] = $this->apiClient->getSerializer()->toQueryValue($lon);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPointsResponse',
                '/StopPoint'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPointsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPointsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetByMode
     *
     * Gets a list of StopPoints filtered by the modes available at that StopPoint.
     *
     * @param string[] $modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param int $page The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPointsResponse
     */
    public function stopPointGetByMode($modes, $page = null)
    {
        list($response) = $this->stopPointGetByModeWithHttpInfo($modes, $page);
        return $response;
    }

    /**
     * Operation stopPointGetByModeWithHttpInfo
     *
     * Gets a list of StopPoints filtered by the modes available at that StopPoint.
     *
     * @param string[] $modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param int $page The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPointsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetByModeWithHttpInfo($modes, $page = null)
    {
        // verify the required parameter 'modes' is set
        if ($modes === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modes when calling stopPointGetByMode');
        }
        // parse inputs
        $resourcePath = "/StopPoint/Mode/{modes}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // path params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv');
        }
        if ($modes !== null) {
            $resourcePath = str_replace(
                "{" . "modes" . "}",
                $this->apiClient->getSerializer()->toPathValue($modes),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPointsResponse',
                '/StopPoint/Mode/{modes}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPointsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPointsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetBySms
     *
     * Gets a StopPoint for a given sms code.
     *
     * @param string $id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. (required)
     * @param string $output If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Object
     */
    public function stopPointGetBySms($id, $output = null)
    {
        list($response) = $this->stopPointGetBySmsWithHttpInfo($id, $output);
        return $response;
    }

    /**
     * Operation stopPointGetBySmsWithHttpInfo
     *
     * Gets a StopPoint for a given sms code.
     *
     * @param string $id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. (required)
     * @param string $output If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetBySmsWithHttpInfo($id, $output = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointGetBySms');
        }
        // parse inputs
        $resourcePath = "/StopPoint/Sms/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($output !== null) {
            $queryParams['output'] = $this->apiClient->getSerializer()->toQueryValue($output);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Object',
                '/StopPoint/Sms/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetByType
     *
     * Gets all stop points of a given type
     *
     * @param string[] $types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPoint[]
     */
    public function stopPointGetByType($types)
    {
        list($response) = $this->stopPointGetByTypeWithHttpInfo($types);
        return $response;
    }

    /**
     * Operation stopPointGetByTypeWithHttpInfo
     *
     * Gets all stop points of a given type
     *
     * @param string[] $types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetByTypeWithHttpInfo($types)
    {
        // verify the required parameter 'types' is set
        if ($types === null) {
            throw new \InvalidArgumentException('Missing the required parameter $types when calling stopPointGetByType');
        }
        // parse inputs
        $resourcePath = "/StopPoint/Type/{types}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if (is_array($types)) {
            $types = $this->apiClient->getSerializer()->serializeCollection($types, 'csv');
        }
        if ($types !== null) {
            $resourcePath = str_replace(
                "{" . "types" . "}",
                $this->apiClient->getSerializer()->toPathValue($types),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPoint[]',
                '/StopPoint/Type/{types}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetCarParksById
     *
     * Get car parks corresponding to the given stop point id.
     *
     * @param string $stop_point_id stopPointId is required to get the car parks. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Place[]
     */
    public function stopPointGetCarParksById($stop_point_id)
    {
        list($response) = $this->stopPointGetCarParksByIdWithHttpInfo($stop_point_id);
        return $response;
    }

    /**
     * Operation stopPointGetCarParksByIdWithHttpInfo
     *
     * Get car parks corresponding to the given stop point id.
     *
     * @param string $stop_point_id stopPointId is required to get the car parks. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Place[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetCarParksByIdWithHttpInfo($stop_point_id)
    {
        // verify the required parameter 'stop_point_id' is set
        if ($stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stop_point_id when calling stopPointGetCarParksById');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{stopPointId}/CarParks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "stopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($stop_point_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Place[]',
                '/StopPoint/{stopPointId}/CarParks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Place[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Place[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetServiceTypes
     *
     * Gets the service types for a given stoppoint
     *
     * @param string $id The Naptan id of the stop (required)
     * @param string[] $line_ids The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     * @param string[] $modes The modes which the lines are relevant to (all if empty) (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\LineServiceType[]
     */
    public function stopPointGetServiceTypes($id, $line_ids = null, $modes = null)
    {
        list($response) = $this->stopPointGetServiceTypesWithHttpInfo($id, $line_ids, $modes);
        return $response;
    }

    /**
     * Operation stopPointGetServiceTypesWithHttpInfo
     *
     * Gets the service types for a given stoppoint
     *
     * @param string $id The Naptan id of the stop (required)
     * @param string[] $line_ids The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     * @param string[] $modes The modes which the lines are relevant to (all if empty) (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\LineServiceType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetServiceTypesWithHttpInfo($id, $line_ids = null, $modes = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointGetServiceTypes');
        }
        // parse inputs
        $resourcePath = "/StopPoint/ServiceTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // query params
        if (is_array($line_ids)) {
            $line_ids = $this->apiClient->getSerializer()->serializeCollection($line_ids, 'csv', true);
        }
        if ($line_ids !== null) {
            $queryParams['lineIds'] = $this->apiClient->getSerializer()->toQueryValue($line_ids);
        }
        // query params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv', true);
        }
        if ($modes !== null) {
            $queryParams['modes'] = $this->apiClient->getSerializer()->toQueryValue($modes);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\LineServiceType[]',
                '/StopPoint/ServiceTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\LineServiceType[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\LineServiceType[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointGetTaxiRanksByIds
     *
     * Gets a list of taxi ranks corresponding to the given stop point id.
     *
     * @param string $stop_point_id stopPointId is required to get the taxi ranks. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Place[]
     */
    public function stopPointGetTaxiRanksByIds($stop_point_id)
    {
        list($response) = $this->stopPointGetTaxiRanksByIdsWithHttpInfo($stop_point_id);
        return $response;
    }

    /**
     * Operation stopPointGetTaxiRanksByIdsWithHttpInfo
     *
     * Gets a list of taxi ranks corresponding to the given stop point id.
     *
     * @param string $stop_point_id stopPointId is required to get the taxi ranks. (required)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Place[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointGetTaxiRanksByIdsWithHttpInfo($stop_point_id)
    {
        // verify the required parameter 'stop_point_id' is set
        if ($stop_point_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $stop_point_id when calling stopPointGetTaxiRanksByIds');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{stopPointId}/TaxiRanks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($stop_point_id !== null) {
            $resourcePath = str_replace(
                "{" . "stopPointId" . "}",
                $this->apiClient->getSerializer()->toPathValue($stop_point_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Place[]',
                '/StopPoint/{stopPointId}/TaxiRanks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Place[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Place[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointMetaCategories
     *
     * Gets the list of available StopPoint additional information categories
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPointCategory[]
     */
    public function stopPointMetaCategories()
    {
        list($response) = $this->stopPointMetaCategoriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation stopPointMetaCategoriesWithHttpInfo
     *
     * Gets the list of available StopPoint additional information categories
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPointCategory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointMetaCategoriesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/StopPoint/Meta/Categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPointCategory[]',
                '/StopPoint/Meta/Categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPointCategory[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPointCategory[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointMetaModes
     *
     * Gets the list of available StopPoint modes
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\Mode[]
     */
    public function stopPointMetaModes()
    {
        list($response) = $this->stopPointMetaModesWithHttpInfo();
        return $response;
    }

    /**
     * Operation stopPointMetaModesWithHttpInfo
     *
     * Gets the list of available StopPoint modes
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\Mode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointMetaModesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/StopPoint/Meta/Modes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\Mode[]',
                '/StopPoint/Meta/Modes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\Mode[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\Mode[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointMetaStopTypes
     *
     * Gets the list of available StopPoint types
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return string[]
     */
    public function stopPointMetaStopTypes()
    {
        list($response) = $this->stopPointMetaStopTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation stopPointMetaStopTypesWithHttpInfo
     *
     * Gets the list of available StopPoint types
     *
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointMetaStopTypesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/StopPoint/Meta/StopTypes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/StopPoint/Meta/StopTypes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointReachableFrom
     *
     * Gets Stopoints that are reachable from a station/line combination.
     *
     * @param string $id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by (required)
     * @param string $line_id Line id of the line to filter by (e.g. victoria) (required)
     * @param string[] $service_types A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPoint[]
     */
    public function stopPointReachableFrom($id, $line_id, $service_types = null)
    {
        list($response) = $this->stopPointReachableFromWithHttpInfo($id, $line_id, $service_types);
        return $response;
    }

    /**
     * Operation stopPointReachableFromWithHttpInfo
     *
     * Gets Stopoints that are reachable from a station/line combination.
     *
     * @param string $id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by (required)
     * @param string $line_id Line id of the line to filter by (e.g. victoria) (required)
     * @param string[] $service_types A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointReachableFromWithHttpInfo($id, $line_id, $service_types = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointReachableFrom');
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $line_id when calling stopPointReachableFrom');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{id}/CanReachOnLine/{lineId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                "{" . "lineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($line_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPoint[]',
                '/StopPoint/{id}/CanReachOnLine/{lineId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPoint[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointRoute
     *
     * Returns the route sections for all the lines that service the given stop point ids
     *
     * @param string $id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string[] $service_types A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\StopPointRouteSection[]
     */
    public function stopPointRoute($id, $service_types = null)
    {
        list($response) = $this->stopPointRouteWithHttpInfo($id, $service_types);
        return $response;
    }

    /**
     * Operation stopPointRouteWithHttpInfo
     *
     * Returns the route sections for all the lines that service the given stop point ids
     *
     * @param string $id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param string[] $service_types A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\StopPointRouteSection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointRouteWithHttpInfo($id, $service_types = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling stopPointRoute');
        }
        // parse inputs
        $resourcePath = "/StopPoint/{id}/Route";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($service_types)) {
            $service_types = $this->apiClient->getSerializer()->serializeCollection($service_types, 'csv', true);
        }
        if ($service_types !== null) {
            $queryParams['serviceTypes'] = $this->apiClient->getSerializer()->toQueryValue($service_types);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\StopPointRouteSection[]',
                '/StopPoint/{id}/Route'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\StopPointRouteSection[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\StopPointRouteSection[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointSearch
     *
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     *
     * @param string $query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param string[] $modes An optional, parameter separated list of the modes to filter by (optional)
     * @param bool $fares_only True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param int $max_results An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param string[] $lines An optional, parameter separated list of the lines to filter by (optional)
     * @param bool $include_hubs If true, returns results including HUBs. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\SearchResponse
     */
    public function stopPointSearch($query, $modes = null, $fares_only = null, $max_results = null, $lines = null, $include_hubs = null)
    {
        list($response) = $this->stopPointSearchWithHttpInfo($query, $modes, $fares_only, $max_results, $lines, $include_hubs);
        return $response;
    }

    /**
     * Operation stopPointSearchWithHttpInfo
     *
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     *
     * @param string $query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param string[] $modes An optional, parameter separated list of the modes to filter by (optional)
     * @param bool $fares_only True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param int $max_results An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param string[] $lines An optional, parameter separated list of the lines to filter by (optional)
     * @param bool $include_hubs If true, returns results including HUBs. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointSearchWithHttpInfo($query, $modes = null, $fares_only = null, $max_results = null, $lines = null, $include_hubs = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling stopPointSearch');
        }
        // parse inputs
        $resourcePath = "/StopPoint/Search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv', true);
        }
        if ($modes !== null) {
            $queryParams['modes'] = $this->apiClient->getSerializer()->toQueryValue($modes);
        }
        // query params
        if ($fares_only !== null) {
            $queryParams['faresOnly'] = $this->apiClient->getSerializer()->toQueryValue($fares_only);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = $this->apiClient->getSerializer()->toQueryValue($max_results);
        }
        // query params
        if (is_array($lines)) {
            $lines = $this->apiClient->getSerializer()->serializeCollection($lines, 'csv', true);
        }
        if ($lines !== null) {
            $queryParams['lines'] = $this->apiClient->getSerializer()->toQueryValue($lines);
        }
        // query params
        if ($include_hubs !== null) {
            $queryParams['includeHubs'] = $this->apiClient->getSerializer()->toQueryValue($include_hubs);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\SearchResponse',
                '/StopPoint/Search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\SearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation stopPointSearchByQuery
     *
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     *
     * @param string $query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param string[] $modes An optional, parameter separated list of the modes to filter by (optional)
     * @param bool $fares_only True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param int $max_results An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param string[] $lines An optional, parameter separated list of the lines to filter by (optional)
     * @param bool $include_hubs If true, returns results including HUBs. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return \Abulia\TflUnified\Swagger\Model\SearchResponse
     */
    public function stopPointSearchByQuery($query, $modes = null, $fares_only = null, $max_results = null, $lines = null, $include_hubs = null)
    {
        list($response) = $this->stopPointSearchByQueryWithHttpInfo($query, $modes, $fares_only, $max_results, $lines, $include_hubs);
        return $response;
    }

    /**
     * Operation stopPointSearchByQueryWithHttpInfo
     *
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     *
     * @param string $query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param string[] $modes An optional, parameter separated list of the modes to filter by (optional)
     * @param bool $fares_only True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param int $max_results An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param string[] $lines An optional, parameter separated list of the lines to filter by (optional)
     * @param bool $include_hubs If true, returns results including HUBs. (optional)
     * @throws \Abulia\TflUnified\Swagger\ApiException on non-2xx response
     * @return array of \Abulia\TflUnified\Swagger\Model\SearchResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function stopPointSearchByQueryWithHttpInfo($query, $modes = null, $fares_only = null, $max_results = null, $lines = null, $include_hubs = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling stopPointSearchByQuery');
        }
        // parse inputs
        $resourcePath = "/StopPoint/Search/{query}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'text/json', 'application/xml', 'text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if (is_array($modes)) {
            $modes = $this->apiClient->getSerializer()->serializeCollection($modes, 'csv', true);
        }
        if ($modes !== null) {
            $queryParams['modes'] = $this->apiClient->getSerializer()->toQueryValue($modes);
        }
        // query params
        if ($fares_only !== null) {
            $queryParams['faresOnly'] = $this->apiClient->getSerializer()->toQueryValue($fares_only);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = $this->apiClient->getSerializer()->toQueryValue($max_results);
        }
        // query params
        if (is_array($lines)) {
            $lines = $this->apiClient->getSerializer()->serializeCollection($lines, 'csv', true);
        }
        if ($lines !== null) {
            $queryParams['lines'] = $this->apiClient->getSerializer()->toQueryValue($lines);
        }
        // query params
        if ($include_hubs !== null) {
            $queryParams['includeHubs'] = $this->apiClient->getSerializer()->toQueryValue($include_hubs);
        }
        // path params
        if ($query !== null) {
            $resourcePath = str_replace(
                "{" . "query" . "}",
                $this->apiClient->getSerializer()->toPathValue($query),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_key');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('app_id');
        if (strlen($apiKey) !== 0) {
            $queryParams['app_id'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Abulia\TflUnified\Swagger\Model\SearchResponse',
                '/StopPoint/Search/{query}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Abulia\TflUnified\Swagger\Model\SearchResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Abulia\TflUnified\Swagger\Model\SearchResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
