<?php
/**
 * RoadDisruptionLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * RoadDisruptionLine Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoadDisruptionLine implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RoadDisruptionLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_date' => '\DateTime',
        'end_time' => 'string',
        'id' => 'int',
        'is_diversion' => 'bool',
        'multi_line_string' => '\Abulia\TflUnified\Swagger\Model\DbGeography',
        'road_disruption_id' => 'string',
        'start_date' => '\DateTime',
        'start_time' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'end_date' => 'endDate',
        'end_time' => 'endTime',
        'id' => 'id',
        'is_diversion' => 'isDiversion',
        'multi_line_string' => 'multiLineString',
        'road_disruption_id' => 'roadDisruptionId',
        'start_date' => 'startDate',
        'start_time' => 'startTime'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'end_date' => 'setEndDate',
        'end_time' => 'setEndTime',
        'id' => 'setId',
        'is_diversion' => 'setIsDiversion',
        'multi_line_string' => 'setMultiLineString',
        'road_disruption_id' => 'setRoadDisruptionId',
        'start_date' => 'setStartDate',
        'start_time' => 'setStartTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'end_date' => 'getEndDate',
        'end_time' => 'getEndTime',
        'id' => 'getId',
        'is_diversion' => 'getIsDiversion',
        'multi_line_string' => 'getMultiLineString',
        'road_disruption_id' => 'getRoadDisruptionId',
        'start_date' => 'getStartDate',
        'start_time' => 'getStartTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['end_time'] = isset($data['end_time']) ? $data['end_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_diversion'] = isset($data['is_diversion']) ? $data['is_diversion'] : null;
        $this->container['multi_line_string'] = isset($data['multi_line_string']) ? $data['multi_line_string'] : null;
        $this->container['road_disruption_id'] = isset($data['road_disruption_id']) ? $data['road_disruption_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_time'] = isset($data['start_time']) ? $data['start_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets end_time
     * @return string
     */
    public function getEndTime()
    {
        return $this->container['end_time'];
    }

    /**
     * Sets end_time
     * @param string $end_time
     * @return $this
     */
    public function setEndTime($end_time)
    {
        $this->container['end_time'] = $end_time;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_diversion
     * @return bool
     */
    public function getIsDiversion()
    {
        return $this->container['is_diversion'];
    }

    /**
     * Sets is_diversion
     * @param bool $is_diversion
     * @return $this
     */
    public function setIsDiversion($is_diversion)
    {
        $this->container['is_diversion'] = $is_diversion;

        return $this;
    }

    /**
     * Gets multi_line_string
     * @return \Abulia\TflUnified\Swagger\Model\DbGeography
     */
    public function getMultiLineString()
    {
        return $this->container['multi_line_string'];
    }

    /**
     * Sets multi_line_string
     * @param \Abulia\TflUnified\Swagger\Model\DbGeography $multi_line_string
     * @return $this
     */
    public function setMultiLineString($multi_line_string)
    {
        $this->container['multi_line_string'] = $multi_line_string;

        return $this;
    }

    /**
     * Gets road_disruption_id
     * @return string
     */
    public function getRoadDisruptionId()
    {
        return $this->container['road_disruption_id'];
    }

    /**
     * Sets road_disruption_id
     * @param string $road_disruption_id
     * @return $this
     */
    public function setRoadDisruptionId($road_disruption_id)
    {
        $this->container['road_disruption_id'] = $road_disruption_id;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_time
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['start_time'];
    }

    /**
     * Sets start_time
     * @param string $start_time
     * @return $this
     */
    public function setStartTime($start_time)
    {
        $this->container['start_time'] = $start_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


