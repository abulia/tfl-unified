<?php
/**
 * Coordinate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * Coordinate Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Coordinate implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Coordinate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'easting' => 'double',
        'latitude' => 'double',
        'longitude' => 'double',
        'northing' => 'double',
        'x_coord' => 'int',
        'y_coord' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'easting' => 'easting',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'northing' => 'northing',
        'x_coord' => 'xCoord',
        'y_coord' => 'yCoord'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'easting' => 'setEasting',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'northing' => 'setNorthing',
        'x_coord' => 'setXCoord',
        'y_coord' => 'setYCoord'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'easting' => 'getEasting',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'northing' => 'getNorthing',
        'x_coord' => 'getXCoord',
        'y_coord' => 'getYCoord'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['easting'] = isset($data['easting']) ? $data['easting'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['northing'] = isset($data['northing']) ? $data['northing'] : null;
        $this->container['x_coord'] = isset($data['x_coord']) ? $data['x_coord'] : null;
        $this->container['y_coord'] = isset($data['y_coord']) ? $data['y_coord'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets easting
     * @return double
     */
    public function getEasting()
    {
        return $this->container['easting'];
    }

    /**
     * Sets easting
     * @param double $easting
     * @return $this
     */
    public function setEasting($easting)
    {
        $this->container['easting'] = $easting;

        return $this;
    }

    /**
     * Gets latitude
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     * @param double $latitude
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     * @param double $longitude
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets northing
     * @return double
     */
    public function getNorthing()
    {
        return $this->container['northing'];
    }

    /**
     * Sets northing
     * @param double $northing
     * @return $this
     */
    public function setNorthing($northing)
    {
        $this->container['northing'] = $northing;

        return $this;
    }

    /**
     * Gets x_coord
     * @return int
     */
    public function getXCoord()
    {
        return $this->container['x_coord'];
    }

    /**
     * Sets x_coord
     * @param int $x_coord
     * @return $this
     */
    public function setXCoord($x_coord)
    {
        $this->container['x_coord'] = $x_coord;

        return $this;
    }

    /**
     * Gets y_coord
     * @return int
     */
    public function getYCoord()
    {
        return $this->container['y_coord'];
    }

    /**
     * Sets y_coord
     * @param int $y_coord
     * @return $this
     */
    public function setYCoord($y_coord)
    {
        $this->container['y_coord'] = $y_coord;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


