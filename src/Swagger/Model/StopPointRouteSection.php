<?php
/**
 * StopPointRouteSection
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * StopPointRouteSection Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StopPointRouteSection implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StopPointRouteSection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'destination_name' => 'string',
        'direction' => 'string',
        'is_active' => 'bool',
        'line_id' => 'string',
        'line_string' => 'string',
        'mode' => 'string',
        'naptan_id' => 'string',
        'route_section_name' => 'string',
        'service_type' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'vehicle_destination_text' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'destination_name' => 'destinationName',
        'direction' => 'direction',
        'is_active' => 'isActive',
        'line_id' => 'lineId',
        'line_string' => 'lineString',
        'mode' => 'mode',
        'naptan_id' => 'naptanId',
        'route_section_name' => 'routeSectionName',
        'service_type' => 'serviceType',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'vehicle_destination_text' => 'vehicleDestinationText'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'destination_name' => 'setDestinationName',
        'direction' => 'setDirection',
        'is_active' => 'setIsActive',
        'line_id' => 'setLineId',
        'line_string' => 'setLineString',
        'mode' => 'setMode',
        'naptan_id' => 'setNaptanId',
        'route_section_name' => 'setRouteSectionName',
        'service_type' => 'setServiceType',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'vehicle_destination_text' => 'setVehicleDestinationText'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'destination_name' => 'getDestinationName',
        'direction' => 'getDirection',
        'is_active' => 'getIsActive',
        'line_id' => 'getLineId',
        'line_string' => 'getLineString',
        'mode' => 'getMode',
        'naptan_id' => 'getNaptanId',
        'route_section_name' => 'getRouteSectionName',
        'service_type' => 'getServiceType',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'vehicle_destination_text' => 'getVehicleDestinationText'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['destination_name'] = isset($data['destination_name']) ? $data['destination_name'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['line_string'] = isset($data['line_string']) ? $data['line_string'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['naptan_id'] = isset($data['naptan_id']) ? $data['naptan_id'] : null;
        $this->container['route_section_name'] = isset($data['route_section_name']) ? $data['route_section_name'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['vehicle_destination_text'] = isset($data['vehicle_destination_text']) ? $data['vehicle_destination_text'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets destination_name
     * @return string
     */
    public function getDestinationName()
    {
        return $this->container['destination_name'];
    }

    /**
     * Sets destination_name
     * @param string $destination_name
     * @return $this
     */
    public function setDestinationName($destination_name)
    {
        $this->container['destination_name'] = $destination_name;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets line_id
     * @return string
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     * @param string $line_id
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets line_string
     * @return string
     */
    public function getLineString()
    {
        return $this->container['line_string'];
    }

    /**
     * Sets line_string
     * @param string $line_string
     * @return $this
     */
    public function setLineString($line_string)
    {
        $this->container['line_string'] = $line_string;

        return $this;
    }

    /**
     * Gets mode
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param string $mode
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets naptan_id
     * @return string
     */
    public function getNaptanId()
    {
        return $this->container['naptan_id'];
    }

    /**
     * Sets naptan_id
     * @param string $naptan_id
     * @return $this
     */
    public function setNaptanId($naptan_id)
    {
        $this->container['naptan_id'] = $naptan_id;

        return $this;
    }

    /**
     * Gets route_section_name
     * @return string
     */
    public function getRouteSectionName()
    {
        return $this->container['route_section_name'];
    }

    /**
     * Sets route_section_name
     * @param string $route_section_name
     * @return $this
     */
    public function setRouteSectionName($route_section_name)
    {
        $this->container['route_section_name'] = $route_section_name;

        return $this;
    }

    /**
     * Gets service_type
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     * @param string $service_type
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets valid_from
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     * @param \DateTime $valid_from
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     * @param \DateTime $valid_to
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets vehicle_destination_text
     * @return string
     */
    public function getVehicleDestinationText()
    {
        return $this->container['vehicle_destination_text'];
    }

    /**
     * Sets vehicle_destination_text
     * @param string $vehicle_destination_text
     * @return $this
     */
    public function setVehicleDestinationText($vehicle_destination_text)
    {
        $this->container['vehicle_destination_text'] = $vehicle_destination_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


