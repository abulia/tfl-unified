<?php
/**
 * TrainLoading
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * TrainLoading Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TrainLoading implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TrainLoading';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'direction' => 'string',
        'line' => 'string',
        'line_direction' => 'string',
        'naptan_to' => 'string',
        'platform_direction' => 'string',
        'time_slice' => 'string',
        'value' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'direction' => 'direction',
        'line' => 'line',
        'line_direction' => 'lineDirection',
        'naptan_to' => 'naptanTo',
        'platform_direction' => 'platformDirection',
        'time_slice' => 'timeSlice',
        'value' => 'value'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'direction' => 'setDirection',
        'line' => 'setLine',
        'line_direction' => 'setLineDirection',
        'naptan_to' => 'setNaptanTo',
        'platform_direction' => 'setPlatformDirection',
        'time_slice' => 'setTimeSlice',
        'value' => 'setValue'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'direction' => 'getDirection',
        'line' => 'getLine',
        'line_direction' => 'getLineDirection',
        'naptan_to' => 'getNaptanTo',
        'platform_direction' => 'getPlatformDirection',
        'time_slice' => 'getTimeSlice',
        'value' => 'getValue'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['line'] = isset($data['line']) ? $data['line'] : null;
        $this->container['line_direction'] = isset($data['line_direction']) ? $data['line_direction'] : null;
        $this->container['naptan_to'] = isset($data['naptan_to']) ? $data['naptan_to'] : null;
        $this->container['platform_direction'] = isset($data['platform_direction']) ? $data['platform_direction'] : null;
        $this->container['time_slice'] = isset($data['time_slice']) ? $data['time_slice'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction Direction in regards to Journey Planner i.e. inbound or outbound
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets line
     * @return string
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     * @param string $line The Line Name e.g. \"Victoria\"
     * @return $this
     */
    public function setLine($line)
    {
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets line_direction
     * @return string
     */
    public function getLineDirection()
    {
        return $this->container['line_direction'];
    }

    /**
     * Sets line_direction
     * @param string $line_direction Direction of the Line e.g. NB, SB, WB etc.
     * @return $this
     */
    public function setLineDirection($line_direction)
    {
        $this->container['line_direction'] = $line_direction;

        return $this;
    }

    /**
     * Gets naptan_to
     * @return string
     */
    public function getNaptanTo()
    {
        return $this->container['naptan_to'];
    }

    /**
     * Sets naptan_to
     * @param string $naptan_to Naptan of the adjacent station
     * @return $this
     */
    public function setNaptanTo($naptan_to)
    {
        $this->container['naptan_to'] = $naptan_to;

        return $this;
    }

    /**
     * Gets platform_direction
     * @return string
     */
    public function getPlatformDirection()
    {
        return $this->container['platform_direction'];
    }

    /**
     * Sets platform_direction
     * @param string $platform_direction Direction displayed on the platform e.g. NB, SB, WB etc.
     * @return $this
     */
    public function setPlatformDirection($platform_direction)
    {
        $this->container['platform_direction'] = $platform_direction;

        return $this;
    }

    /**
     * Gets time_slice
     * @return string
     */
    public function getTimeSlice()
    {
        return $this->container['time_slice'];
    }

    /**
     * Sets time_slice
     * @param string $time_slice Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.
     * @return $this
     */
    public function setTimeSlice($time_slice)
    {
        $this->container['time_slice'] = $time_slice;

        return $this;
    }

    /**
     * Gets value
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param int $value Scale between 1-6,                1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


