<?php
/**
 * RoadProject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * RoadProject Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoadProject implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RoadProject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boroughs_benefited' => 'string[]',
        'construction_end_date' => '\DateTime',
        'construction_start_date' => '\DateTime',
        'consultation_end_date' => '\DateTime',
        'consultation_page_url' => 'string',
        'consultation_start_date' => '\DateTime',
        'contact_email' => 'string',
        'contact_name' => 'string',
        'cycle_superhighway_id' => 'string',
        'external_page_url' => 'string',
        'phase' => 'string',
        'project_description' => 'string',
        'project_id' => 'string',
        'project_name' => 'string',
        'project_page_url' => 'string',
        'project_summary_page_url' => 'string',
        'scheme_name' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'boroughs_benefited' => 'boroughsBenefited',
        'construction_end_date' => 'constructionEndDate',
        'construction_start_date' => 'constructionStartDate',
        'consultation_end_date' => 'consultationEndDate',
        'consultation_page_url' => 'consultationPageUrl',
        'consultation_start_date' => 'consultationStartDate',
        'contact_email' => 'contactEmail',
        'contact_name' => 'contactName',
        'cycle_superhighway_id' => 'cycleSuperhighwayId',
        'external_page_url' => 'externalPageUrl',
        'phase' => 'phase',
        'project_description' => 'projectDescription',
        'project_id' => 'projectId',
        'project_name' => 'projectName',
        'project_page_url' => 'projectPageUrl',
        'project_summary_page_url' => 'projectSummaryPageUrl',
        'scheme_name' => 'schemeName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'boroughs_benefited' => 'setBoroughsBenefited',
        'construction_end_date' => 'setConstructionEndDate',
        'construction_start_date' => 'setConstructionStartDate',
        'consultation_end_date' => 'setConsultationEndDate',
        'consultation_page_url' => 'setConsultationPageUrl',
        'consultation_start_date' => 'setConsultationStartDate',
        'contact_email' => 'setContactEmail',
        'contact_name' => 'setContactName',
        'cycle_superhighway_id' => 'setCycleSuperhighwayId',
        'external_page_url' => 'setExternalPageUrl',
        'phase' => 'setPhase',
        'project_description' => 'setProjectDescription',
        'project_id' => 'setProjectId',
        'project_name' => 'setProjectName',
        'project_page_url' => 'setProjectPageUrl',
        'project_summary_page_url' => 'setProjectSummaryPageUrl',
        'scheme_name' => 'setSchemeName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'boroughs_benefited' => 'getBoroughsBenefited',
        'construction_end_date' => 'getConstructionEndDate',
        'construction_start_date' => 'getConstructionStartDate',
        'consultation_end_date' => 'getConsultationEndDate',
        'consultation_page_url' => 'getConsultationPageUrl',
        'consultation_start_date' => 'getConsultationStartDate',
        'contact_email' => 'getContactEmail',
        'contact_name' => 'getContactName',
        'cycle_superhighway_id' => 'getCycleSuperhighwayId',
        'external_page_url' => 'getExternalPageUrl',
        'phase' => 'getPhase',
        'project_description' => 'getProjectDescription',
        'project_id' => 'getProjectId',
        'project_name' => 'getProjectName',
        'project_page_url' => 'getProjectPageUrl',
        'project_summary_page_url' => 'getProjectSummaryPageUrl',
        'scheme_name' => 'getSchemeName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PHASE_UNSCOPED = 'Unscoped';
    const PHASE_CONCEPT = 'Concept';
    const PHASE_CONSULTATION_ENDED = 'ConsultationEnded';
    const PHASE_CONSULTATION = 'Consultation';
    const PHASE_CONSTRUCTION = 'Construction';
    const PHASE_COMPLETE = 'Complete';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPhaseAllowableValues()
    {
        return [
            self::PHASE_UNSCOPED,
            self::PHASE_CONCEPT,
            self::PHASE_CONSULTATION_ENDED,
            self::PHASE_CONSULTATION,
            self::PHASE_CONSTRUCTION,
            self::PHASE_COMPLETE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boroughs_benefited'] = isset($data['boroughs_benefited']) ? $data['boroughs_benefited'] : null;
        $this->container['construction_end_date'] = isset($data['construction_end_date']) ? $data['construction_end_date'] : null;
        $this->container['construction_start_date'] = isset($data['construction_start_date']) ? $data['construction_start_date'] : null;
        $this->container['consultation_end_date'] = isset($data['consultation_end_date']) ? $data['consultation_end_date'] : null;
        $this->container['consultation_page_url'] = isset($data['consultation_page_url']) ? $data['consultation_page_url'] : null;
        $this->container['consultation_start_date'] = isset($data['consultation_start_date']) ? $data['consultation_start_date'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['cycle_superhighway_id'] = isset($data['cycle_superhighway_id']) ? $data['cycle_superhighway_id'] : null;
        $this->container['external_page_url'] = isset($data['external_page_url']) ? $data['external_page_url'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['project_description'] = isset($data['project_description']) ? $data['project_description'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['project_page_url'] = isset($data['project_page_url']) ? $data['project_page_url'] : null;
        $this->container['project_summary_page_url'] = isset($data['project_summary_page_url']) ? $data['project_summary_page_url'] : null;
        $this->container['scheme_name'] = isset($data['scheme_name']) ? $data['scheme_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["Unscoped", "Concept", "ConsultationEnded", "Consultation", "Construction", "Complete"];
        if (!in_array($this->container['phase'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'phase', must be one of 'Unscoped', 'Concept', 'ConsultationEnded', 'Consultation', 'Construction', 'Complete'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["Unscoped", "Concept", "ConsultationEnded", "Consultation", "Construction", "Complete"];
        if (!in_array($this->container['phase'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets boroughs_benefited
     * @return string[]
     */
    public function getBoroughsBenefited()
    {
        return $this->container['boroughs_benefited'];
    }

    /**
     * Sets boroughs_benefited
     * @param string[] $boroughs_benefited
     * @return $this
     */
    public function setBoroughsBenefited($boroughs_benefited)
    {
        $this->container['boroughs_benefited'] = $boroughs_benefited;

        return $this;
    }

    /**
     * Gets construction_end_date
     * @return \DateTime
     */
    public function getConstructionEndDate()
    {
        return $this->container['construction_end_date'];
    }

    /**
     * Sets construction_end_date
     * @param \DateTime $construction_end_date
     * @return $this
     */
    public function setConstructionEndDate($construction_end_date)
    {
        $this->container['construction_end_date'] = $construction_end_date;

        return $this;
    }

    /**
     * Gets construction_start_date
     * @return \DateTime
     */
    public function getConstructionStartDate()
    {
        return $this->container['construction_start_date'];
    }

    /**
     * Sets construction_start_date
     * @param \DateTime $construction_start_date
     * @return $this
     */
    public function setConstructionStartDate($construction_start_date)
    {
        $this->container['construction_start_date'] = $construction_start_date;

        return $this;
    }

    /**
     * Gets consultation_end_date
     * @return \DateTime
     */
    public function getConsultationEndDate()
    {
        return $this->container['consultation_end_date'];
    }

    /**
     * Sets consultation_end_date
     * @param \DateTime $consultation_end_date
     * @return $this
     */
    public function setConsultationEndDate($consultation_end_date)
    {
        $this->container['consultation_end_date'] = $consultation_end_date;

        return $this;
    }

    /**
     * Gets consultation_page_url
     * @return string
     */
    public function getConsultationPageUrl()
    {
        return $this->container['consultation_page_url'];
    }

    /**
     * Sets consultation_page_url
     * @param string $consultation_page_url
     * @return $this
     */
    public function setConsultationPageUrl($consultation_page_url)
    {
        $this->container['consultation_page_url'] = $consultation_page_url;

        return $this;
    }

    /**
     * Gets consultation_start_date
     * @return \DateTime
     */
    public function getConsultationStartDate()
    {
        return $this->container['consultation_start_date'];
    }

    /**
     * Sets consultation_start_date
     * @param \DateTime $consultation_start_date
     * @return $this
     */
    public function setConsultationStartDate($consultation_start_date)
    {
        $this->container['consultation_start_date'] = $consultation_start_date;

        return $this;
    }

    /**
     * Gets contact_email
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     * @param string $contact_email
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_name
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     * @param string $contact_name
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets cycle_superhighway_id
     * @return string
     */
    public function getCycleSuperhighwayId()
    {
        return $this->container['cycle_superhighway_id'];
    }

    /**
     * Sets cycle_superhighway_id
     * @param string $cycle_superhighway_id
     * @return $this
     */
    public function setCycleSuperhighwayId($cycle_superhighway_id)
    {
        $this->container['cycle_superhighway_id'] = $cycle_superhighway_id;

        return $this;
    }

    /**
     * Gets external_page_url
     * @return string
     */
    public function getExternalPageUrl()
    {
        return $this->container['external_page_url'];
    }

    /**
     * Sets external_page_url
     * @param string $external_page_url
     * @return $this
     */
    public function setExternalPageUrl($external_page_url)
    {
        $this->container['external_page_url'] = $external_page_url;

        return $this;
    }

    /**
     * Gets phase
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     * @param string $phase
     * @return $this
     */
    public function setPhase($phase)
    {
        $allowed_values = array('Unscoped', 'Concept', 'ConsultationEnded', 'Consultation', 'Construction', 'Complete');
        if (!is_null($phase) && (!in_array($phase, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'phase', must be one of 'Unscoped', 'Concept', 'ConsultationEnded', 'Consultation', 'Construction', 'Complete'");
        }
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets project_description
     * @return string
     */
    public function getProjectDescription()
    {
        return $this->container['project_description'];
    }

    /**
     * Sets project_description
     * @param string $project_description
     * @return $this
     */
    public function setProjectDescription($project_description)
    {
        $this->container['project_description'] = $project_description;

        return $this;
    }

    /**
     * Gets project_id
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     * @param string $project_id
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_name
     * @return string
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     * @param string $project_name
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets project_page_url
     * @return string
     */
    public function getProjectPageUrl()
    {
        return $this->container['project_page_url'];
    }

    /**
     * Sets project_page_url
     * @param string $project_page_url
     * @return $this
     */
    public function setProjectPageUrl($project_page_url)
    {
        $this->container['project_page_url'] = $project_page_url;

        return $this;
    }

    /**
     * Gets project_summary_page_url
     * @return string
     */
    public function getProjectSummaryPageUrl()
    {
        return $this->container['project_summary_page_url'];
    }

    /**
     * Sets project_summary_page_url
     * @param string $project_summary_page_url
     * @return $this
     */
    public function setProjectSummaryPageUrl($project_summary_page_url)
    {
        $this->container['project_summary_page_url'] = $project_summary_page_url;

        return $this;
    }

    /**
     * Gets scheme_name
     * @return string
     */
    public function getSchemeName()
    {
        return $this->container['scheme_name'];
    }

    /**
     * Sets scheme_name
     * @param string $scheme_name
     * @return $this
     */
    public function setSchemeName($scheme_name)
    {
        $this->container['scheme_name'] = $scheme_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


