<?php
/**
 * StopPointSequence
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * StopPointSequence Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class StopPointSequence implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'StopPointSequence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branch_id' => 'int',
        'direction' => 'string',
        'line_id' => 'string',
        'line_name' => 'string',
        'next_branch_ids' => 'int[]',
        'prev_branch_ids' => 'int[]',
        'service_type' => 'string',
        'stop_point' => '\Abulia\TflUnified\Swagger\Model\MatchedStop[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'branch_id' => 'branchId',
        'direction' => 'direction',
        'line_id' => 'lineId',
        'line_name' => 'lineName',
        'next_branch_ids' => 'nextBranchIds',
        'prev_branch_ids' => 'prevBranchIds',
        'service_type' => 'serviceType',
        'stop_point' => 'stopPoint'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'branch_id' => 'setBranchId',
        'direction' => 'setDirection',
        'line_id' => 'setLineId',
        'line_name' => 'setLineName',
        'next_branch_ids' => 'setNextBranchIds',
        'prev_branch_ids' => 'setPrevBranchIds',
        'service_type' => 'setServiceType',
        'stop_point' => 'setStopPoint'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'branch_id' => 'getBranchId',
        'direction' => 'getDirection',
        'line_id' => 'getLineId',
        'line_name' => 'getLineName',
        'next_branch_ids' => 'getNextBranchIds',
        'prev_branch_ids' => 'getPrevBranchIds',
        'service_type' => 'getServiceType',
        'stop_point' => 'getStopPoint'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SERVICE_TYPE_REGULAR = 'Regular';
    const SERVICE_TYPE_NIGHT = 'Night';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getServiceTypeAllowableValues()
    {
        return [
            self::SERVICE_TYPE_REGULAR,
            self::SERVICE_TYPE_NIGHT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch_id'] = isset($data['branch_id']) ? $data['branch_id'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['line_name'] = isset($data['line_name']) ? $data['line_name'] : null;
        $this->container['next_branch_ids'] = isset($data['next_branch_ids']) ? $data['next_branch_ids'] : null;
        $this->container['prev_branch_ids'] = isset($data['prev_branch_ids']) ? $data['prev_branch_ids'] : null;
        $this->container['service_type'] = isset($data['service_type']) ? $data['service_type'] : null;
        $this->container['stop_point'] = isset($data['stop_point']) ? $data['stop_point'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["Regular", "Night"];
        if (!in_array($this->container['service_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'service_type', must be one of 'Regular', 'Night'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["Regular", "Night"];
        if (!in_array($this->container['service_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets branch_id
     * @return int
     */
    public function getBranchId()
    {
        return $this->container['branch_id'];
    }

    /**
     * Sets branch_id
     * @param int $branch_id The id of this branch.
     * @return $this
     */
    public function setBranchId($branch_id)
    {
        $this->container['branch_id'] = $branch_id;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets line_id
     * @return string
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     * @param string $line_id
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets line_name
     * @return string
     */
    public function getLineName()
    {
        return $this->container['line_name'];
    }

    /**
     * Sets line_name
     * @param string $line_name
     * @return $this
     */
    public function setLineName($line_name)
    {
        $this->container['line_name'] = $line_name;

        return $this;
    }

    /**
     * Gets next_branch_ids
     * @return int[]
     */
    public function getNextBranchIds()
    {
        return $this->container['next_branch_ids'];
    }

    /**
     * Sets next_branch_ids
     * @param int[] $next_branch_ids The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
     * @return $this
     */
    public function setNextBranchIds($next_branch_ids)
    {
        $this->container['next_branch_ids'] = $next_branch_ids;

        return $this;
    }

    /**
     * Gets prev_branch_ids
     * @return int[]
     */
    public function getPrevBranchIds()
    {
        return $this->container['prev_branch_ids'];
    }

    /**
     * Sets prev_branch_ids
     * @param int[] $prev_branch_ids The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
     * @return $this
     */
    public function setPrevBranchIds($prev_branch_ids)
    {
        $this->container['prev_branch_ids'] = $prev_branch_ids;

        return $this;
    }

    /**
     * Gets service_type
     * @return string
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     * @param string $service_type
     * @return $this
     */
    public function setServiceType($service_type)
    {
        $allowed_values = array('Regular', 'Night');
        if (!is_null($service_type) && (!in_array($service_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'service_type', must be one of 'Regular', 'Night'");
        }
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets stop_point
     * @return \Abulia\TflUnified\Swagger\Model\MatchedStop[]
     */
    public function getStopPoint()
    {
        return $this->container['stop_point'];
    }

    /**
     * Sets stop_point
     * @param \Abulia\TflUnified\Swagger\Model\MatchedStop[] $stop_point
     * @return $this
     */
    public function setStopPoint($stop_point)
    {
        $this->container['stop_point'] = $stop_point;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


