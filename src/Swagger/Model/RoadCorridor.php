<?php
/**
 * RoadCorridor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * RoadCorridor Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoadCorridor implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RoadCorridor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bounds' => 'string',
        'display_name' => 'string',
        'envelope' => 'string',
        'group' => 'string',
        'id' => 'string',
        'status_aggregation_end_date' => '\DateTime',
        'status_aggregation_start_date' => '\DateTime',
        'status_severity' => 'string',
        'status_severity_description' => 'string',
        'url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bounds' => 'bounds',
        'display_name' => 'displayName',
        'envelope' => 'envelope',
        'group' => 'group',
        'id' => 'id',
        'status_aggregation_end_date' => 'statusAggregationEndDate',
        'status_aggregation_start_date' => 'statusAggregationStartDate',
        'status_severity' => 'statusSeverity',
        'status_severity_description' => 'statusSeverityDescription',
        'url' => 'url'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bounds' => 'setBounds',
        'display_name' => 'setDisplayName',
        'envelope' => 'setEnvelope',
        'group' => 'setGroup',
        'id' => 'setId',
        'status_aggregation_end_date' => 'setStatusAggregationEndDate',
        'status_aggregation_start_date' => 'setStatusAggregationStartDate',
        'status_severity' => 'setStatusSeverity',
        'status_severity_description' => 'setStatusSeverityDescription',
        'url' => 'setUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bounds' => 'getBounds',
        'display_name' => 'getDisplayName',
        'envelope' => 'getEnvelope',
        'group' => 'getGroup',
        'id' => 'getId',
        'status_aggregation_end_date' => 'getStatusAggregationEndDate',
        'status_aggregation_start_date' => 'getStatusAggregationStartDate',
        'status_severity' => 'getStatusSeverity',
        'status_severity_description' => 'getStatusSeverityDescription',
        'url' => 'getUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bounds'] = isset($data['bounds']) ? $data['bounds'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['envelope'] = isset($data['envelope']) ? $data['envelope'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status_aggregation_end_date'] = isset($data['status_aggregation_end_date']) ? $data['status_aggregation_end_date'] : null;
        $this->container['status_aggregation_start_date'] = isset($data['status_aggregation_start_date']) ? $data['status_aggregation_start_date'] : null;
        $this->container['status_severity'] = isset($data['status_severity']) ? $data['status_severity'] : null;
        $this->container['status_severity_description'] = isset($data['status_severity_description']) ? $data['status_severity_description'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets bounds
     * @return string
     */
    public function getBounds()
    {
        return $this->container['bounds'];
    }

    /**
     * Sets bounds
     * @param string $bounds The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate              pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\"
     * @return $this
     */
    public function setBounds($bounds)
    {
        $this->container['bounds'] = $bounds;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name The display name of the Corridor e.g. \"North Circular (A406)\". This              may be identical to the Id.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets envelope
     * @return string
     */
    public function getEnvelope()
    {
        return $this->container['envelope'];
    }

    /**
     * Sets envelope
     * @param string $envelope The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon              in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\"
     * @return $this
     */
    public function setEnvelope($envelope)
    {
        $this->container['envelope'] = $envelope;

        return $this;
    }

    /**
     * Gets group
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     * @param string $group The group name of the Corridor e.g. \"Central London\". Most corridors are not grouped, in which case this field can be null.
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The Id of the Corridor e.g. \"A406\"
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status_aggregation_end_date
     * @return \DateTime
     */
    public function getStatusAggregationEndDate()
    {
        return $this->container['status_aggregation_end_date'];
    }

    /**
     * Sets status_aggregation_end_date
     * @param \DateTime $status_aggregation_end_date The end of the period over which status has been aggregated, or null if this is the current corridor status.
     * @return $this
     */
    public function setStatusAggregationEndDate($status_aggregation_end_date)
    {
        $this->container['status_aggregation_end_date'] = $status_aggregation_end_date;

        return $this;
    }

    /**
     * Gets status_aggregation_start_date
     * @return \DateTime
     */
    public function getStatusAggregationStartDate()
    {
        return $this->container['status_aggregation_start_date'];
    }

    /**
     * Sets status_aggregation_start_date
     * @param \DateTime $status_aggregation_start_date The start of the period over which status has been aggregated, or null if this is the current corridor status.
     * @return $this
     */
    public function setStatusAggregationStartDate($status_aggregation_start_date)
    {
        $this->container['status_aggregation_start_date'] = $status_aggregation_start_date;

        return $this;
    }

    /**
     * Gets status_severity
     * @return string
     */
    public function getStatusSeverity()
    {
        return $this->container['status_severity'];
    }

    /**
     * Sets status_severity
     * @param string $status_severity Standard multi-mode status severity code
     * @return $this
     */
    public function setStatusSeverity($status_severity)
    {
        $this->container['status_severity'] = $status_severity;

        return $this;
    }

    /**
     * Gets status_severity_description
     * @return string
     */
    public function getStatusSeverityDescription()
    {
        return $this->container['status_severity_description'];
    }

    /**
     * Sets status_severity_description
     * @param string $status_severity_description Description of the status severity as applied to RoadCorridors
     * @return $this
     */
    public function setStatusSeverityDescription($status_severity_description)
    {
        $this->container['status_severity_description'] = $status_severity_description;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url URL to retrieve this Corridor.
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


