<?php
/**
 * Prediction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * Prediction Class Doc Comment
 *
 * @category    Class
 * @description DTO to capture the prediction details
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Prediction implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Prediction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bearing' => 'string',
        'current_location' => 'string',
        'destination_name' => 'string',
        'destination_naptan_id' => 'string',
        'direction' => 'string',
        'expected_arrival' => '\DateTime',
        'id' => 'string',
        'line_id' => 'string',
        'line_name' => 'string',
        'mode_name' => 'string',
        'naptan_id' => 'string',
        'operation_type' => 'int',
        'platform_name' => 'string',
        'station_name' => 'string',
        'time_to_live' => '\DateTime',
        'time_to_station' => 'int',
        'timestamp' => '\DateTime',
        'timing' => '\Abulia\TflUnified\Swagger\Model\PredictionTiming',
        'towards' => 'string',
        'vehicle_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bearing' => 'bearing',
        'current_location' => 'currentLocation',
        'destination_name' => 'destinationName',
        'destination_naptan_id' => 'destinationNaptanId',
        'direction' => 'direction',
        'expected_arrival' => 'expectedArrival',
        'id' => 'id',
        'line_id' => 'lineId',
        'line_name' => 'lineName',
        'mode_name' => 'modeName',
        'naptan_id' => 'naptanId',
        'operation_type' => 'operationType',
        'platform_name' => 'platformName',
        'station_name' => 'stationName',
        'time_to_live' => 'timeToLive',
        'time_to_station' => 'timeToStation',
        'timestamp' => 'timestamp',
        'timing' => 'timing',
        'towards' => 'towards',
        'vehicle_id' => 'vehicleId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bearing' => 'setBearing',
        'current_location' => 'setCurrentLocation',
        'destination_name' => 'setDestinationName',
        'destination_naptan_id' => 'setDestinationNaptanId',
        'direction' => 'setDirection',
        'expected_arrival' => 'setExpectedArrival',
        'id' => 'setId',
        'line_id' => 'setLineId',
        'line_name' => 'setLineName',
        'mode_name' => 'setModeName',
        'naptan_id' => 'setNaptanId',
        'operation_type' => 'setOperationType',
        'platform_name' => 'setPlatformName',
        'station_name' => 'setStationName',
        'time_to_live' => 'setTimeToLive',
        'time_to_station' => 'setTimeToStation',
        'timestamp' => 'setTimestamp',
        'timing' => 'setTiming',
        'towards' => 'setTowards',
        'vehicle_id' => 'setVehicleId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bearing' => 'getBearing',
        'current_location' => 'getCurrentLocation',
        'destination_name' => 'getDestinationName',
        'destination_naptan_id' => 'getDestinationNaptanId',
        'direction' => 'getDirection',
        'expected_arrival' => 'getExpectedArrival',
        'id' => 'getId',
        'line_id' => 'getLineId',
        'line_name' => 'getLineName',
        'mode_name' => 'getModeName',
        'naptan_id' => 'getNaptanId',
        'operation_type' => 'getOperationType',
        'platform_name' => 'getPlatformName',
        'station_name' => 'getStationName',
        'time_to_live' => 'getTimeToLive',
        'time_to_station' => 'getTimeToStation',
        'timestamp' => 'getTimestamp',
        'timing' => 'getTiming',
        'towards' => 'getTowards',
        'vehicle_id' => 'getVehicleId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bearing'] = isset($data['bearing']) ? $data['bearing'] : null;
        $this->container['current_location'] = isset($data['current_location']) ? $data['current_location'] : null;
        $this->container['destination_name'] = isset($data['destination_name']) ? $data['destination_name'] : null;
        $this->container['destination_naptan_id'] = isset($data['destination_naptan_id']) ? $data['destination_naptan_id'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['expected_arrival'] = isset($data['expected_arrival']) ? $data['expected_arrival'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['line_name'] = isset($data['line_name']) ? $data['line_name'] : null;
        $this->container['mode_name'] = isset($data['mode_name']) ? $data['mode_name'] : null;
        $this->container['naptan_id'] = isset($data['naptan_id']) ? $data['naptan_id'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
        $this->container['platform_name'] = isset($data['platform_name']) ? $data['platform_name'] : null;
        $this->container['station_name'] = isset($data['station_name']) ? $data['station_name'] : null;
        $this->container['time_to_live'] = isset($data['time_to_live']) ? $data['time_to_live'] : null;
        $this->container['time_to_station'] = isset($data['time_to_station']) ? $data['time_to_station'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['timing'] = isset($data['timing']) ? $data['timing'] : null;
        $this->container['towards'] = isset($data['towards']) ? $data['towards'] : null;
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets bearing
     * @return string
     */
    public function getBearing()
    {
        return $this->container['bearing'];
    }

    /**
     * Sets bearing
     * @param string $bearing Bearing (between 0 to 359)
     * @return $this
     */
    public function setBearing($bearing)
    {
        $this->container['bearing'] = $bearing;

        return $this;
    }

    /**
     * Gets current_location
     * @return string
     */
    public function getCurrentLocation()
    {
        return $this->container['current_location'];
    }

    /**
     * Sets current_location
     * @param string $current_location The current location of the vehicle.
     * @return $this
     */
    public function setCurrentLocation($current_location)
    {
        $this->container['current_location'] = $current_location;

        return $this;
    }

    /**
     * Gets destination_name
     * @return string
     */
    public function getDestinationName()
    {
        return $this->container['destination_name'];
    }

    /**
     * Sets destination_name
     * @param string $destination_name Name of the destination
     * @return $this
     */
    public function setDestinationName($destination_name)
    {
        $this->container['destination_name'] = $destination_name;

        return $this;
    }

    /**
     * Gets destination_naptan_id
     * @return string
     */
    public function getDestinationNaptanId()
    {
        return $this->container['destination_naptan_id'];
    }

    /**
     * Sets destination_naptan_id
     * @param string $destination_naptan_id Naptan Identifier for the prediction's destination
     * @return $this
     */
    public function setDestinationNaptanId($destination_naptan_id)
    {
        $this->container['destination_naptan_id'] = $destination_naptan_id;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction Direction (unified to inbound/outbound)
     * @return $this
     */
    public function setDirection($direction)
    {
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets expected_arrival
     * @return \DateTime
     */
    public function getExpectedArrival()
    {
        return $this->container['expected_arrival'];
    }

    /**
     * Sets expected_arrival
     * @param \DateTime $expected_arrival The expected arrival time of the vehicle at the stop/station
     * @return $this
     */
    public function setExpectedArrival($expected_arrival)
    {
        $this->container['expected_arrival'] = $expected_arrival;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The identitier for the prediction
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets line_id
     * @return string
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     * @param string $line_id Unique identifier for the Line
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets line_name
     * @return string
     */
    public function getLineName()
    {
        return $this->container['line_name'];
    }

    /**
     * Sets line_name
     * @param string $line_name Line Name
     * @return $this
     */
    public function setLineName($line_name)
    {
        $this->container['line_name'] = $line_name;

        return $this;
    }

    /**
     * Gets mode_name
     * @return string
     */
    public function getModeName()
    {
        return $this->container['mode_name'];
    }

    /**
     * Sets mode_name
     * @param string $mode_name The mode name of the station/line the prediction relates to
     * @return $this
     */
    public function setModeName($mode_name)
    {
        $this->container['mode_name'] = $mode_name;

        return $this;
    }

    /**
     * Gets naptan_id
     * @return string
     */
    public function getNaptanId()
    {
        return $this->container['naptan_id'];
    }

    /**
     * Sets naptan_id
     * @param string $naptan_id Identifier for the prediction
     * @return $this
     */
    public function setNaptanId($naptan_id)
    {
        $this->container['naptan_id'] = $naptan_id;

        return $this;
    }

    /**
     * Gets operation_type
     * @return int
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     * @param int $operation_type The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }

    /**
     * Gets platform_name
     * @return string
     */
    public function getPlatformName()
    {
        return $this->container['platform_name'];
    }

    /**
     * Sets platform_name
     * @param string $platform_name Platform name (for bus, this is the stop letter)
     * @return $this
     */
    public function setPlatformName($platform_name)
    {
        $this->container['platform_name'] = $platform_name;

        return $this;
    }

    /**
     * Gets station_name
     * @return string
     */
    public function getStationName()
    {
        return $this->container['station_name'];
    }

    /**
     * Sets station_name
     * @param string $station_name Station name
     * @return $this
     */
    public function setStationName($station_name)
    {
        $this->container['station_name'] = $station_name;

        return $this;
    }

    /**
     * Gets time_to_live
     * @return \DateTime
     */
    public function getTimeToLive()
    {
        return $this->container['time_to_live'];
    }

    /**
     * Sets time_to_live
     * @param \DateTime $time_to_live The expiry time for the prediction
     * @return $this
     */
    public function setTimeToLive($time_to_live)
    {
        $this->container['time_to_live'] = $time_to_live;

        return $this;
    }

    /**
     * Gets time_to_station
     * @return int
     */
    public function getTimeToStation()
    {
        return $this->container['time_to_station'];
    }

    /**
     * Sets time_to_station
     * @param int $time_to_station Prediction of the Time to station in seconds
     * @return $this
     */
    public function setTimeToStation($time_to_station)
    {
        $this->container['time_to_station'] = $time_to_station;

        return $this;
    }

    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param \DateTime $timestamp Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets timing
     * @return \Abulia\TflUnified\Swagger\Model\PredictionTiming
     */
    public function getTiming()
    {
        return $this->container['timing'];
    }

    /**
     * Sets timing
     * @param \Abulia\TflUnified\Swagger\Model\PredictionTiming $timing Keep the original timestamp from MongoDb fo debugging purposes
     * @return $this
     */
    public function setTiming($timing)
    {
        $this->container['timing'] = $timing;

        return $this;
    }

    /**
     * Gets towards
     * @return string
     */
    public function getTowards()
    {
        return $this->container['towards'];
    }

    /**
     * Sets towards
     * @param string $towards Routing information or other descriptive text about the path of the vehicle towards the destination
     * @return $this
     */
    public function setTowards($towards)
    {
        $this->container['towards'] = $towards;

        return $this;
    }

    /**
     * Gets vehicle_id
     * @return string
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     * @param string $vehicle_id The actual vehicle in transit (for train modes, the leading car of the rolling set)
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


