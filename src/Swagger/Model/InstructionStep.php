<?php
/**
 * InstructionStep
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * InstructionStep Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InstructionStep implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InstructionStep';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cumulative_distance' => 'int',
        'cumulative_travel_time' => 'int',
        'description' => 'string',
        'description_heading' => 'string',
        'distance' => 'int',
        'latitude' => 'double',
        'longitude' => 'double',
        'path_attribute' => '\Abulia\TflUnified\Swagger\Model\PathAttribute',
        'sky_direction' => 'int',
        'sky_direction_description' => 'string',
        'street_name' => 'string',
        'track_type' => 'string',
        'turn_direction' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cumulative_distance' => 'cumulativeDistance',
        'cumulative_travel_time' => 'cumulativeTravelTime',
        'description' => 'description',
        'description_heading' => 'descriptionHeading',
        'distance' => 'distance',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'path_attribute' => 'pathAttribute',
        'sky_direction' => 'skyDirection',
        'sky_direction_description' => 'skyDirectionDescription',
        'street_name' => 'streetName',
        'track_type' => 'trackType',
        'turn_direction' => 'turnDirection'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cumulative_distance' => 'setCumulativeDistance',
        'cumulative_travel_time' => 'setCumulativeTravelTime',
        'description' => 'setDescription',
        'description_heading' => 'setDescriptionHeading',
        'distance' => 'setDistance',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'path_attribute' => 'setPathAttribute',
        'sky_direction' => 'setSkyDirection',
        'sky_direction_description' => 'setSkyDirectionDescription',
        'street_name' => 'setStreetName',
        'track_type' => 'setTrackType',
        'turn_direction' => 'setTurnDirection'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cumulative_distance' => 'getCumulativeDistance',
        'cumulative_travel_time' => 'getCumulativeTravelTime',
        'description' => 'getDescription',
        'description_heading' => 'getDescriptionHeading',
        'distance' => 'getDistance',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'path_attribute' => 'getPathAttribute',
        'sky_direction' => 'getSkyDirection',
        'sky_direction_description' => 'getSkyDirectionDescription',
        'street_name' => 'getStreetName',
        'track_type' => 'getTrackType',
        'turn_direction' => 'getTurnDirection'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SKY_DIRECTION_DESCRIPTION_NORTH = 'North';
    const SKY_DIRECTION_DESCRIPTION_NORTH_EAST = 'NorthEast';
    const SKY_DIRECTION_DESCRIPTION_EAST = 'East';
    const SKY_DIRECTION_DESCRIPTION_SOUTH_EAST = 'SouthEast';
    const SKY_DIRECTION_DESCRIPTION_SOUTH = 'South';
    const SKY_DIRECTION_DESCRIPTION_SOUTH_WEST = 'SouthWest';
    const SKY_DIRECTION_DESCRIPTION_WEST = 'West';
    const SKY_DIRECTION_DESCRIPTION_NORTH_WEST = 'NorthWest';
    const TRACK_TYPE_CYCLE_SUPER_HIGHWAY = 'CycleSuperHighway';
    const TRACK_TYPE_CANAL_TOWPATH = 'CanalTowpath';
    const TRACK_TYPE_QUIET_ROAD = 'QuietRoad';
    const TRACK_TYPE_PROVISION_FOR_CYCLISTS = 'ProvisionForCyclists';
    const TRACK_TYPE_BUSY_ROADS = 'BusyRoads';
    const TRACK_TYPE_NONE = 'None';
    const TRACK_TYPE_PUSH_BIKE = 'PushBike';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSkyDirectionDescriptionAllowableValues()
    {
        return [
            self::SKY_DIRECTION_DESCRIPTION_NORTH,
            self::SKY_DIRECTION_DESCRIPTION_NORTH_EAST,
            self::SKY_DIRECTION_DESCRIPTION_EAST,
            self::SKY_DIRECTION_DESCRIPTION_SOUTH_EAST,
            self::SKY_DIRECTION_DESCRIPTION_SOUTH,
            self::SKY_DIRECTION_DESCRIPTION_SOUTH_WEST,
            self::SKY_DIRECTION_DESCRIPTION_WEST,
            self::SKY_DIRECTION_DESCRIPTION_NORTH_WEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTrackTypeAllowableValues()
    {
        return [
            self::TRACK_TYPE_CYCLE_SUPER_HIGHWAY,
            self::TRACK_TYPE_CANAL_TOWPATH,
            self::TRACK_TYPE_QUIET_ROAD,
            self::TRACK_TYPE_PROVISION_FOR_CYCLISTS,
            self::TRACK_TYPE_BUSY_ROADS,
            self::TRACK_TYPE_NONE,
            self::TRACK_TYPE_PUSH_BIKE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cumulative_distance'] = isset($data['cumulative_distance']) ? $data['cumulative_distance'] : null;
        $this->container['cumulative_travel_time'] = isset($data['cumulative_travel_time']) ? $data['cumulative_travel_time'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_heading'] = isset($data['description_heading']) ? $data['description_heading'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['path_attribute'] = isset($data['path_attribute']) ? $data['path_attribute'] : null;
        $this->container['sky_direction'] = isset($data['sky_direction']) ? $data['sky_direction'] : null;
        $this->container['sky_direction_description'] = isset($data['sky_direction_description']) ? $data['sky_direction_description'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['track_type'] = isset($data['track_type']) ? $data['track_type'] : null;
        $this->container['turn_direction'] = isset($data['turn_direction']) ? $data['turn_direction'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["North", "NorthEast", "East", "SouthEast", "South", "SouthWest", "West", "NorthWest"];
        if (!in_array($this->container['sky_direction_description'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'sky_direction_description', must be one of 'North', 'NorthEast', 'East', 'SouthEast', 'South', 'SouthWest', 'West', 'NorthWest'.";
        }

        $allowed_values = ["CycleSuperHighway", "CanalTowpath", "QuietRoad", "ProvisionForCyclists", "BusyRoads", "None", "PushBike"];
        if (!in_array($this->container['track_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'track_type', must be one of 'CycleSuperHighway', 'CanalTowpath', 'QuietRoad', 'ProvisionForCyclists', 'BusyRoads', 'None', 'PushBike'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["North", "NorthEast", "East", "SouthEast", "South", "SouthWest", "West", "NorthWest"];
        if (!in_array($this->container['sky_direction_description'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["CycleSuperHighway", "CanalTowpath", "QuietRoad", "ProvisionForCyclists", "BusyRoads", "None", "PushBike"];
        if (!in_array($this->container['track_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets cumulative_distance
     * @return int
     */
    public function getCumulativeDistance()
    {
        return $this->container['cumulative_distance'];
    }

    /**
     * Sets cumulative_distance
     * @param int $cumulative_distance
     * @return $this
     */
    public function setCumulativeDistance($cumulative_distance)
    {
        $this->container['cumulative_distance'] = $cumulative_distance;

        return $this;
    }

    /**
     * Gets cumulative_travel_time
     * @return int
     */
    public function getCumulativeTravelTime()
    {
        return $this->container['cumulative_travel_time'];
    }

    /**
     * Sets cumulative_travel_time
     * @param int $cumulative_travel_time
     * @return $this
     */
    public function setCumulativeTravelTime($cumulative_travel_time)
    {
        $this->container['cumulative_travel_time'] = $cumulative_travel_time;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_heading
     * @return string
     */
    public function getDescriptionHeading()
    {
        return $this->container['description_heading'];
    }

    /**
     * Sets description_heading
     * @param string $description_heading
     * @return $this
     */
    public function setDescriptionHeading($description_heading)
    {
        $this->container['description_heading'] = $description_heading;

        return $this;
    }

    /**
     * Gets distance
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     * @param int $distance
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets latitude
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     * @param double $latitude
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     * @param double $longitude
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets path_attribute
     * @return \Abulia\TflUnified\Swagger\Model\PathAttribute
     */
    public function getPathAttribute()
    {
        return $this->container['path_attribute'];
    }

    /**
     * Sets path_attribute
     * @param \Abulia\TflUnified\Swagger\Model\PathAttribute $path_attribute
     * @return $this
     */
    public function setPathAttribute($path_attribute)
    {
        $this->container['path_attribute'] = $path_attribute;

        return $this;
    }

    /**
     * Gets sky_direction
     * @return int
     */
    public function getSkyDirection()
    {
        return $this->container['sky_direction'];
    }

    /**
     * Sets sky_direction
     * @param int $sky_direction
     * @return $this
     */
    public function setSkyDirection($sky_direction)
    {
        $this->container['sky_direction'] = $sky_direction;

        return $this;
    }

    /**
     * Gets sky_direction_description
     * @return string
     */
    public function getSkyDirectionDescription()
    {
        return $this->container['sky_direction_description'];
    }

    /**
     * Sets sky_direction_description
     * @param string $sky_direction_description
     * @return $this
     */
    public function setSkyDirectionDescription($sky_direction_description)
    {
        $allowed_values = array('North', 'NorthEast', 'East', 'SouthEast', 'South', 'SouthWest', 'West', 'NorthWest');
        if (!is_null($sky_direction_description) && (!in_array($sky_direction_description, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'sky_direction_description', must be one of 'North', 'NorthEast', 'East', 'SouthEast', 'South', 'SouthWest', 'West', 'NorthWest'");
        }
        $this->container['sky_direction_description'] = $sky_direction_description;

        return $this;
    }

    /**
     * Gets street_name
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     * @param string $street_name
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets track_type
     * @return string
     */
    public function getTrackType()
    {
        return $this->container['track_type'];
    }

    /**
     * Sets track_type
     * @param string $track_type
     * @return $this
     */
    public function setTrackType($track_type)
    {
        $allowed_values = array('CycleSuperHighway', 'CanalTowpath', 'QuietRoad', 'ProvisionForCyclists', 'BusyRoads', 'None', 'PushBike');
        if (!is_null($track_type) && (!in_array($track_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'track_type', must be one of 'CycleSuperHighway', 'CanalTowpath', 'QuietRoad', 'ProvisionForCyclists', 'BusyRoads', 'None', 'PushBike'");
        }
        $this->container['track_type'] = $track_type;

        return $this;
    }

    /**
     * Gets turn_direction
     * @return string
     */
    public function getTurnDirection()
    {
        return $this->container['turn_direction'];
    }

    /**
     * Sets turn_direction
     * @param string $turn_direction
     * @return $this
     */
    public function setTurnDirection($turn_direction)
    {
        $this->container['turn_direction'] = $turn_direction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


