<?php
/**
 * Leg
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * Leg Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Leg implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Leg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arrival_point' => '\Abulia\TflUnified\Swagger\Model\Point',
        'arrival_time' => '\DateTime',
        'departure_point' => '\Abulia\TflUnified\Swagger\Model\Point',
        'departure_time' => '\DateTime',
        'disruptions' => '\Abulia\TflUnified\Swagger\Model\Disruption[]',
        'distance' => 'double',
        'duration' => 'int',
        'has_fixed_locations' => 'bool',
        'instruction' => '\Abulia\TflUnified\Swagger\Model\Instruction',
        'is_disrupted' => 'bool',
        'mode' => '\Abulia\TflUnified\Swagger\Model\Identifier',
        'obstacles' => '\Abulia\TflUnified\Swagger\Model\Obstacle[]',
        'path' => '\Abulia\TflUnified\Swagger\Model\Path',
        'planned_works' => '\Abulia\TflUnified\Swagger\Model\PlannedWork[]',
        'route_options' => '\Abulia\TflUnified\Swagger\Model\RouteOption[]',
        'speed' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'arrival_point' => 'arrivalPoint',
        'arrival_time' => 'arrivalTime',
        'departure_point' => 'departurePoint',
        'departure_time' => 'departureTime',
        'disruptions' => 'disruptions',
        'distance' => 'distance',
        'duration' => 'duration',
        'has_fixed_locations' => 'hasFixedLocations',
        'instruction' => 'instruction',
        'is_disrupted' => 'isDisrupted',
        'mode' => 'mode',
        'obstacles' => 'obstacles',
        'path' => 'path',
        'planned_works' => 'plannedWorks',
        'route_options' => 'routeOptions',
        'speed' => 'speed'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'arrival_point' => 'setArrivalPoint',
        'arrival_time' => 'setArrivalTime',
        'departure_point' => 'setDeparturePoint',
        'departure_time' => 'setDepartureTime',
        'disruptions' => 'setDisruptions',
        'distance' => 'setDistance',
        'duration' => 'setDuration',
        'has_fixed_locations' => 'setHasFixedLocations',
        'instruction' => 'setInstruction',
        'is_disrupted' => 'setIsDisrupted',
        'mode' => 'setMode',
        'obstacles' => 'setObstacles',
        'path' => 'setPath',
        'planned_works' => 'setPlannedWorks',
        'route_options' => 'setRouteOptions',
        'speed' => 'setSpeed'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'arrival_point' => 'getArrivalPoint',
        'arrival_time' => 'getArrivalTime',
        'departure_point' => 'getDeparturePoint',
        'departure_time' => 'getDepartureTime',
        'disruptions' => 'getDisruptions',
        'distance' => 'getDistance',
        'duration' => 'getDuration',
        'has_fixed_locations' => 'getHasFixedLocations',
        'instruction' => 'getInstruction',
        'is_disrupted' => 'getIsDisrupted',
        'mode' => 'getMode',
        'obstacles' => 'getObstacles',
        'path' => 'getPath',
        'planned_works' => 'getPlannedWorks',
        'route_options' => 'getRouteOptions',
        'speed' => 'getSpeed'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrival_point'] = isset($data['arrival_point']) ? $data['arrival_point'] : null;
        $this->container['arrival_time'] = isset($data['arrival_time']) ? $data['arrival_time'] : null;
        $this->container['departure_point'] = isset($data['departure_point']) ? $data['departure_point'] : null;
        $this->container['departure_time'] = isset($data['departure_time']) ? $data['departure_time'] : null;
        $this->container['disruptions'] = isset($data['disruptions']) ? $data['disruptions'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['has_fixed_locations'] = isset($data['has_fixed_locations']) ? $data['has_fixed_locations'] : null;
        $this->container['instruction'] = isset($data['instruction']) ? $data['instruction'] : null;
        $this->container['is_disrupted'] = isset($data['is_disrupted']) ? $data['is_disrupted'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['obstacles'] = isset($data['obstacles']) ? $data['obstacles'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['planned_works'] = isset($data['planned_works']) ? $data['planned_works'] : null;
        $this->container['route_options'] = isset($data['route_options']) ? $data['route_options'] : null;
        $this->container['speed'] = isset($data['speed']) ? $data['speed'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets arrival_point
     * @return \Abulia\TflUnified\Swagger\Model\Point
     */
    public function getArrivalPoint()
    {
        return $this->container['arrival_point'];
    }

    /**
     * Sets arrival_point
     * @param \Abulia\TflUnified\Swagger\Model\Point $arrival_point
     * @return $this
     */
    public function setArrivalPoint($arrival_point)
    {
        $this->container['arrival_point'] = $arrival_point;

        return $this;
    }

    /**
     * Gets arrival_time
     * @return \DateTime
     */
    public function getArrivalTime()
    {
        return $this->container['arrival_time'];
    }

    /**
     * Sets arrival_time
     * @param \DateTime $arrival_time
     * @return $this
     */
    public function setArrivalTime($arrival_time)
    {
        $this->container['arrival_time'] = $arrival_time;

        return $this;
    }

    /**
     * Gets departure_point
     * @return \Abulia\TflUnified\Swagger\Model\Point
     */
    public function getDeparturePoint()
    {
        return $this->container['departure_point'];
    }

    /**
     * Sets departure_point
     * @param \Abulia\TflUnified\Swagger\Model\Point $departure_point
     * @return $this
     */
    public function setDeparturePoint($departure_point)
    {
        $this->container['departure_point'] = $departure_point;

        return $this;
    }

    /**
     * Gets departure_time
     * @return \DateTime
     */
    public function getDepartureTime()
    {
        return $this->container['departure_time'];
    }

    /**
     * Sets departure_time
     * @param \DateTime $departure_time
     * @return $this
     */
    public function setDepartureTime($departure_time)
    {
        $this->container['departure_time'] = $departure_time;

        return $this;
    }

    /**
     * Gets disruptions
     * @return \Abulia\TflUnified\Swagger\Model\Disruption[]
     */
    public function getDisruptions()
    {
        return $this->container['disruptions'];
    }

    /**
     * Sets disruptions
     * @param \Abulia\TflUnified\Swagger\Model\Disruption[] $disruptions
     * @return $this
     */
    public function setDisruptions($disruptions)
    {
        $this->container['disruptions'] = $disruptions;

        return $this;
    }

    /**
     * Gets distance
     * @return double
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     * @param double $distance
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets has_fixed_locations
     * @return bool
     */
    public function getHasFixedLocations()
    {
        return $this->container['has_fixed_locations'];
    }

    /**
     * Sets has_fixed_locations
     * @param bool $has_fixed_locations
     * @return $this
     */
    public function setHasFixedLocations($has_fixed_locations)
    {
        $this->container['has_fixed_locations'] = $has_fixed_locations;

        return $this;
    }

    /**
     * Gets instruction
     * @return \Abulia\TflUnified\Swagger\Model\Instruction
     */
    public function getInstruction()
    {
        return $this->container['instruction'];
    }

    /**
     * Sets instruction
     * @param \Abulia\TflUnified\Swagger\Model\Instruction $instruction Describes the action the user need to take for this section, E.g. \"walk to the              district line\"
     * @return $this
     */
    public function setInstruction($instruction)
    {
        $this->container['instruction'] = $instruction;

        return $this;
    }

    /**
     * Gets is_disrupted
     * @return bool
     */
    public function getIsDisrupted()
    {
        return $this->container['is_disrupted'];
    }

    /**
     * Sets is_disrupted
     * @param bool $is_disrupted
     * @return $this
     */
    public function setIsDisrupted($is_disrupted)
    {
        $this->container['is_disrupted'] = $is_disrupted;

        return $this;
    }

    /**
     * Gets mode
     * @return \Abulia\TflUnified\Swagger\Model\Identifier
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param \Abulia\TflUnified\Swagger\Model\Identifier $mode
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets obstacles
     * @return \Abulia\TflUnified\Swagger\Model\Obstacle[]
     */
    public function getObstacles()
    {
        return $this->container['obstacles'];
    }

    /**
     * Sets obstacles
     * @param \Abulia\TflUnified\Swagger\Model\Obstacle[] $obstacles
     * @return $this
     */
    public function setObstacles($obstacles)
    {
        $this->container['obstacles'] = $obstacles;

        return $this;
    }

    /**
     * Gets path
     * @return \Abulia\TflUnified\Swagger\Model\Path
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     * @param \Abulia\TflUnified\Swagger\Model\Path $path
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets planned_works
     * @return \Abulia\TflUnified\Swagger\Model\PlannedWork[]
     */
    public function getPlannedWorks()
    {
        return $this->container['planned_works'];
    }

    /**
     * Sets planned_works
     * @param \Abulia\TflUnified\Swagger\Model\PlannedWork[] $planned_works
     * @return $this
     */
    public function setPlannedWorks($planned_works)
    {
        $this->container['planned_works'] = $planned_works;

        return $this;
    }

    /**
     * Gets route_options
     * @return \Abulia\TflUnified\Swagger\Model\RouteOption[]
     */
    public function getRouteOptions()
    {
        return $this->container['route_options'];
    }

    /**
     * Sets route_options
     * @param \Abulia\TflUnified\Swagger\Model\RouteOption[] $route_options
     * @return $this
     */
    public function setRouteOptions($route_options)
    {
        $this->container['route_options'] = $route_options;

        return $this;
    }

    /**
     * Gets speed
     * @return string
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     * @param string $speed
     * @return $this
     */
    public function setSpeed($speed)
    {
        $this->container['speed'] = $speed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


