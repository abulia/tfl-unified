<?php
/**
 * JpElevation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * JpElevation Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class JpElevation implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'JpElevation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'distance' => 'int',
        'end_lat' => 'double',
        'end_lon' => 'double',
        'gradient' => 'double',
        'height_from_previous_point' => 'int',
        'start_lat' => 'double',
        'start_lon' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'distance' => 'distance',
        'end_lat' => 'endLat',
        'end_lon' => 'endLon',
        'gradient' => 'gradient',
        'height_from_previous_point' => 'heightFromPreviousPoint',
        'start_lat' => 'startLat',
        'start_lon' => 'startLon'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'distance' => 'setDistance',
        'end_lat' => 'setEndLat',
        'end_lon' => 'setEndLon',
        'gradient' => 'setGradient',
        'height_from_previous_point' => 'setHeightFromPreviousPoint',
        'start_lat' => 'setStartLat',
        'start_lon' => 'setStartLon'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'distance' => 'getDistance',
        'end_lat' => 'getEndLat',
        'end_lon' => 'getEndLon',
        'gradient' => 'getGradient',
        'height_from_previous_point' => 'getHeightFromPreviousPoint',
        'start_lat' => 'getStartLat',
        'start_lon' => 'getStartLon'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['end_lat'] = isset($data['end_lat']) ? $data['end_lat'] : null;
        $this->container['end_lon'] = isset($data['end_lon']) ? $data['end_lon'] : null;
        $this->container['gradient'] = isset($data['gradient']) ? $data['gradient'] : null;
        $this->container['height_from_previous_point'] = isset($data['height_from_previous_point']) ? $data['height_from_previous_point'] : null;
        $this->container['start_lat'] = isset($data['start_lat']) ? $data['start_lat'] : null;
        $this->container['start_lon'] = isset($data['start_lon']) ? $data['start_lon'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets distance
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     * @param int $distance
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets end_lat
     * @return double
     */
    public function getEndLat()
    {
        return $this->container['end_lat'];
    }

    /**
     * Sets end_lat
     * @param double $end_lat
     * @return $this
     */
    public function setEndLat($end_lat)
    {
        $this->container['end_lat'] = $end_lat;

        return $this;
    }

    /**
     * Gets end_lon
     * @return double
     */
    public function getEndLon()
    {
        return $this->container['end_lon'];
    }

    /**
     * Sets end_lon
     * @param double $end_lon
     * @return $this
     */
    public function setEndLon($end_lon)
    {
        $this->container['end_lon'] = $end_lon;

        return $this;
    }

    /**
     * Gets gradient
     * @return double
     */
    public function getGradient()
    {
        return $this->container['gradient'];
    }

    /**
     * Sets gradient
     * @param double $gradient
     * @return $this
     */
    public function setGradient($gradient)
    {
        $this->container['gradient'] = $gradient;

        return $this;
    }

    /**
     * Gets height_from_previous_point
     * @return int
     */
    public function getHeightFromPreviousPoint()
    {
        return $this->container['height_from_previous_point'];
    }

    /**
     * Sets height_from_previous_point
     * @param int $height_from_previous_point
     * @return $this
     */
    public function setHeightFromPreviousPoint($height_from_previous_point)
    {
        $this->container['height_from_previous_point'] = $height_from_previous_point;

        return $this;
    }

    /**
     * Gets start_lat
     * @return double
     */
    public function getStartLat()
    {
        return $this->container['start_lat'];
    }

    /**
     * Sets start_lat
     * @param double $start_lat
     * @return $this
     */
    public function setStartLat($start_lat)
    {
        $this->container['start_lat'] = $start_lat;

        return $this;
    }

    /**
     * Gets start_lon
     * @return double
     */
    public function getStartLon()
    {
        return $this->container['start_lon'];
    }

    /**
     * Sets start_lon
     * @param double $start_lon
     * @return $this
     */
    public function setStartLon($start_lon)
    {
        $this->container['start_lon'] = $start_lon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


