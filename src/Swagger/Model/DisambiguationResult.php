<?php
/**
 * DisambiguationResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * DisambiguationResult Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DisambiguationResult implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DisambiguationResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'to_location_disambiguation' => '\Abulia\TflUnified\Swagger\Model\Disambiguation',
        'from_location_disambiguation' => '\Abulia\TflUnified\Swagger\Model\Disambiguation',
        'via_location_disambiguation' => '\Abulia\TflUnified\Swagger\Model\Disambiguation',
        'recommended_max_age_minutes' => 'int',
        'search_criteria' => '\Abulia\TflUnified\Swagger\Model\SearchCriteria',
        'journey_vector' => '\Abulia\TflUnified\Swagger\Model\JourneyVector'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'to_location_disambiguation' => 'toLocationDisambiguation',
        'from_location_disambiguation' => 'fromLocationDisambiguation',
        'via_location_disambiguation' => 'viaLocationDisambiguation',
        'recommended_max_age_minutes' => 'recommendedMaxAgeMinutes',
        'search_criteria' => 'searchCriteria',
        'journey_vector' => 'journeyVector'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'to_location_disambiguation' => 'setToLocationDisambiguation',
        'from_location_disambiguation' => 'setFromLocationDisambiguation',
        'via_location_disambiguation' => 'setViaLocationDisambiguation',
        'recommended_max_age_minutes' => 'setRecommendedMaxAgeMinutes',
        'search_criteria' => 'setSearchCriteria',
        'journey_vector' => 'setJourneyVector'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'to_location_disambiguation' => 'getToLocationDisambiguation',
        'from_location_disambiguation' => 'getFromLocationDisambiguation',
        'via_location_disambiguation' => 'getViaLocationDisambiguation',
        'recommended_max_age_minutes' => 'getRecommendedMaxAgeMinutes',
        'search_criteria' => 'getSearchCriteria',
        'journey_vector' => 'getJourneyVector'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['to_location_disambiguation'] = isset($data['to_location_disambiguation']) ? $data['to_location_disambiguation'] : null;
        $this->container['from_location_disambiguation'] = isset($data['from_location_disambiguation']) ? $data['from_location_disambiguation'] : null;
        $this->container['via_location_disambiguation'] = isset($data['via_location_disambiguation']) ? $data['via_location_disambiguation'] : null;
        $this->container['recommended_max_age_minutes'] = isset($data['recommended_max_age_minutes']) ? $data['recommended_max_age_minutes'] : null;
        $this->container['search_criteria'] = isset($data['search_criteria']) ? $data['search_criteria'] : null;
        $this->container['journey_vector'] = isset($data['journey_vector']) ? $data['journey_vector'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets to_location_disambiguation
     * @return \Abulia\TflUnified\Swagger\Model\Disambiguation
     */
    public function getToLocationDisambiguation()
    {
        return $this->container['to_location_disambiguation'];
    }

    /**
     * Sets to_location_disambiguation
     * @param \Abulia\TflUnified\Swagger\Model\Disambiguation $to_location_disambiguation
     * @return $this
     */
    public function setToLocationDisambiguation($to_location_disambiguation)
    {
        $this->container['to_location_disambiguation'] = $to_location_disambiguation;

        return $this;
    }

    /**
     * Gets from_location_disambiguation
     * @return \Abulia\TflUnified\Swagger\Model\Disambiguation
     */
    public function getFromLocationDisambiguation()
    {
        return $this->container['from_location_disambiguation'];
    }

    /**
     * Sets from_location_disambiguation
     * @param \Abulia\TflUnified\Swagger\Model\Disambiguation $from_location_disambiguation
     * @return $this
     */
    public function setFromLocationDisambiguation($from_location_disambiguation)
    {
        $this->container['from_location_disambiguation'] = $from_location_disambiguation;

        return $this;
    }

    /**
     * Gets via_location_disambiguation
     * @return \Abulia\TflUnified\Swagger\Model\Disambiguation
     */
    public function getViaLocationDisambiguation()
    {
        return $this->container['via_location_disambiguation'];
    }

    /**
     * Sets via_location_disambiguation
     * @param \Abulia\TflUnified\Swagger\Model\Disambiguation $via_location_disambiguation
     * @return $this
     */
    public function setViaLocationDisambiguation($via_location_disambiguation)
    {
        $this->container['via_location_disambiguation'] = $via_location_disambiguation;

        return $this;
    }

    /**
     * Gets recommended_max_age_minutes
     * @return int
     */
    public function getRecommendedMaxAgeMinutes()
    {
        return $this->container['recommended_max_age_minutes'];
    }

    /**
     * Sets recommended_max_age_minutes
     * @param int $recommended_max_age_minutes
     * @return $this
     */
    public function setRecommendedMaxAgeMinutes($recommended_max_age_minutes)
    {
        $this->container['recommended_max_age_minutes'] = $recommended_max_age_minutes;

        return $this;
    }

    /**
     * Gets search_criteria
     * @return \Abulia\TflUnified\Swagger\Model\SearchCriteria
     */
    public function getSearchCriteria()
    {
        return $this->container['search_criteria'];
    }

    /**
     * Sets search_criteria
     * @param \Abulia\TflUnified\Swagger\Model\SearchCriteria $search_criteria
     * @return $this
     */
    public function setSearchCriteria($search_criteria)
    {
        $this->container['search_criteria'] = $search_criteria;

        return $this;
    }

    /**
     * Gets journey_vector
     * @return \Abulia\TflUnified\Swagger\Model\JourneyVector
     */
    public function getJourneyVector()
    {
        return $this->container['journey_vector'];
    }

    /**
     * Sets journey_vector
     * @param \Abulia\TflUnified\Swagger\Model\JourneyVector $journey_vector
     * @return $this
     */
    public function setJourneyVector($journey_vector)
    {
        $this->container['journey_vector'] = $journey_vector;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


