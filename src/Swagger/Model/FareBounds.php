<?php
/**
 * FareBounds
 *
 * PHP version 5
 *
 * @category Class
 * @package  Abulia\TflUnified\Swagger
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Transport for London Unified API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Abulia\TflUnified\Swagger\Model;

use \ArrayAccess;
use Illuminate\Contracts\Support\Jsonable;

/**
 * FareBounds Class Doc Comment
 *
 * @category    Class
 * @package     Abulia\TflUnified\Swagger
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FareBounds implements ArrayAccess, Jsonable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'FareBounds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'display_name' => 'string',
        'display_order' => 'int',
        'from' => 'string',
        'id' => 'int',
        'is_popular_fare' => 'bool',
        'is_popular_travel_card' => 'bool',
        'is_tour' => 'bool',
        'messages' => '\Abulia\TflUnified\Swagger\Model\Message[]',
        'operator' => 'string',
        'route_code' => 'string',
        'to' => 'string',
        'via' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'display_name' => 'displayName',
        'display_order' => 'displayOrder',
        'from' => 'from',
        'id' => 'id',
        'is_popular_fare' => 'isPopularFare',
        'is_popular_travel_card' => 'isPopularTravelCard',
        'is_tour' => 'isTour',
        'messages' => 'messages',
        'operator' => 'operator',
        'route_code' => 'routeCode',
        'to' => 'to',
        'via' => 'via'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'display_order' => 'setDisplayOrder',
        'from' => 'setFrom',
        'id' => 'setId',
        'is_popular_fare' => 'setIsPopularFare',
        'is_popular_travel_card' => 'setIsPopularTravelCard',
        'is_tour' => 'setIsTour',
        'messages' => 'setMessages',
        'operator' => 'setOperator',
        'route_code' => 'setRouteCode',
        'to' => 'setTo',
        'via' => 'setVia'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'display_order' => 'getDisplayOrder',
        'from' => 'getFrom',
        'id' => 'getId',
        'is_popular_fare' => 'getIsPopularFare',
        'is_popular_travel_card' => 'getIsPopularTravelCard',
        'is_tour' => 'getIsTour',
        'messages' => 'getMessages',
        'operator' => 'getOperator',
        'route_code' => 'getRouteCode',
        'to' => 'getTo',
        'via' => 'getVia'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['display_order'] = isset($data['display_order']) ? $data['display_order'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_popular_fare'] = isset($data['is_popular_fare']) ? $data['is_popular_fare'] : null;
        $this->container['is_popular_travel_card'] = isset($data['is_popular_travel_card']) ? $data['is_popular_travel_card'] : null;
        $this->container['is_tour'] = isset($data['is_tour']) ? $data['is_tour'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['route_code'] = isset($data['route_code']) ? $data['route_code'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['via'] = isset($data['via']) ? $data['via'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets display_order
     * @return int
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     * @param int $display_order
     * @return $this
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets from
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param string $from
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_popular_fare
     * @return bool
     */
    public function getIsPopularFare()
    {
        return $this->container['is_popular_fare'];
    }

    /**
     * Sets is_popular_fare
     * @param bool $is_popular_fare
     * @return $this
     */
    public function setIsPopularFare($is_popular_fare)
    {
        $this->container['is_popular_fare'] = $is_popular_fare;

        return $this;
    }

    /**
     * Gets is_popular_travel_card
     * @return bool
     */
    public function getIsPopularTravelCard()
    {
        return $this->container['is_popular_travel_card'];
    }

    /**
     * Sets is_popular_travel_card
     * @param bool $is_popular_travel_card
     * @return $this
     */
    public function setIsPopularTravelCard($is_popular_travel_card)
    {
        $this->container['is_popular_travel_card'] = $is_popular_travel_card;

        return $this;
    }

    /**
     * Gets is_tour
     * @return bool
     */
    public function getIsTour()
    {
        return $this->container['is_tour'];
    }

    /**
     * Sets is_tour
     * @param bool $is_tour
     * @return $this
     */
    public function setIsTour($is_tour)
    {
        $this->container['is_tour'] = $is_tour;

        return $this;
    }

    /**
     * Gets messages
     * @return \Abulia\TflUnified\Swagger\Model\Message[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     * @param \Abulia\TflUnified\Swagger\Model\Message[] $messages
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets operator
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     * @param string $operator
     * @return $this
     */
    public function setOperator($operator)
    {
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets route_code
     * @return string
     */
    public function getRouteCode()
    {
        return $this->container['route_code'];
    }

    /**
     * Sets route_code
     * @param string $route_code
     * @return $this
     */
    public function setRouteCode($route_code)
    {
        $this->container['route_code'] = $route_code;

        return $this;
    }

    /**
     * Gets to
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param string $to
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets via
     * @return string
     */
    public function getVia()
    {
        return $this->container['via'];
    }

    /**
     * Sets via
     * @param string $via
     * @return $this
     */
    public function setVia($via)
    {
        $this->container['via'] = $via;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Abulia\TflUnified\Swagger\ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * To allow implict conversion to JSON by Laravel.
     */
    public function toJson($options = 0)
    {
        return $this->__toString();
    }

    /**
     * For convenient property based access.
     */
    public function __get($name)
    {
        if (isset(static::$getters[$name])) {
            return $this->{static::$getters[$name]}();
        }
        return null;
    }
}


